[
  {
    "objectID": "takehome/takehome3new.html",
    "href": "takehome/takehome3new.html",
    "title": "takehome3",
    "section": "",
    "text": "In this VAST Challenge project, we analyze the impact of SouthSeafood Express Corp’s illegal fishing on the business network. The first question explores how the network and competing businesses change due to the incident. The second question identifies which companies benefited from SouthSeafood Express Corp’s legal troubles."
  },
  {
    "objectID": "takehome/takehome3new.html#getting-started",
    "href": "takehome/takehome3new.html#getting-started",
    "title": "takehome3",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nCode\npacman::p_load(tidytext, readtext, quanteda, tidyverse, jsonlite, igraph, tidygraph, ggraph, visNetwork, clock, graphlayouts,ggplot2)"
  },
  {
    "objectID": "takehome/takehome3new.html#importing-json-file",
    "href": "takehome/takehome3new.html#importing-json-file",
    "title": "takehome3",
    "section": "Importing JSON File",
    "text": "Importing JSON File\nDirect import of the mc3.json file shows an error message indicating that there’s an invalid character in the JSON text, specifically “NaN”. As “NaN” is not recognised as a valid value, preprocessing of the JSON file to replace “NaN” is required.\n\n\nCode\n# Read the JSON file as text\njson_text &lt;- readLines(\"data/mc3.json\" ,warn = FALSE)\n\n# Replace \"NaN\" with \"null\"\njson_text_fixed &lt;- gsub(\"NaN\", \"null\", json_text)\n\n# Write the fixed JSON text back to a file\nwriteLines(json_text_fixed, \"data/mc3_fixed.json\")\n\n\nImporting preprocessed mc3_fixed.json file\n\n\nCode\nmc3_data &lt;- fromJSON(\"data/mc3_fixed.json\")"
  },
  {
    "objectID": "takehome/takehome3new.html#data-cleaning",
    "href": "takehome/takehome3new.html#data-cleaning",
    "title": "takehome3",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nMissing Values\nIdentify the percentage of missing values within the dataset\n\n\nCode\n# Function to calculate missing value percentages\ncalculate_missing_percentage &lt;- function(df) {\n  total_values &lt;- nrow(df) * ncol(df)\n  missing_values &lt;- sum(is.na(df))\n  missing_percentage &lt;- (missing_values / total_values) * 100\n  return(missing_percentage)\n}\n\n\nMissing percentage of nodes\n\n\nCode\nnodes_missing_percentage &lt;- calculate_missing_percentage(mc3_data[[\"nodes\"]])\nnodes_missing_percentage\n\n\n[1] 35.11952\n\n\n\n\nCode\nnodes_missing_by_column &lt;- sapply(mc3_data[[\"nodes\"]], function(x) sum(is.na(x)) / length(x) * 100)\n\n\nMissing percentage of edges\n\n\nCode\nlinks_missing_percentage &lt;- calculate_missing_percentage(mc3_data[[\"links\"]])\nlinks_missing_percentage\n\n\n[1] 9.059973\n\n\nCode\nlinks_missing_by_column &lt;- sapply(mc3_data[[\"links\"]], function(x) sum(is.na(x)) / length(x) * 100)\nlinks_missing_by_column\n\n\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n\n\nPrint missing percentages\n\n\nCode\n# \nprint(nodes_missing_percentage)\n\n\n[1] 35.11952\n\n\nCode\nprint(nodes_missing_by_column)\n\n\n             type           country   ProductServices    PointOfContact \n          0.00000           0.00000          85.34204          85.38334 \n        HeadOfOrg     founding_date           revenue  TradeDescription \n         85.35691          85.34204          85.36847          85.34204 \n  _last_edited_by _last_edited_date       _date_added       _raw_source \n          0.00000           0.00000           0.00000           0.00000 \n       _algorithm                id               dob \n          0.00000           0.00000          14.65796 \n\n\nCode\nprint(links_missing_percentage)\n\n\n[1] 9.059973\n\n\nCode\nprint(links_missing_by_column)\n\n\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n\n\n\nObservations:Actions:\n\n\n\nNodes Data:\n\nProductServices, PointOfContact, HeadOfOrg, founding_date, revenue, and TradeDescription columns have a high percentage of missing values (around 85%).\nThe dob column has about 14.7% missing values.\nOther columns (type, country, _last_edited_by, _last_edited_date, _date_added, _raw_source, _algorithm, and id) have no missing values.\n\nLinks Data:\n\nend_date has a very high percentage of missing values (around 99.5%).\n\n\n\n\n\nFilled missing values in HeadOfOrg with “Unknown”.\nFilled missing values in revenue with 0.\nFilled missing values in start_date and end_date with “Unknown”.\n\n\n\n\nHandle missing values\n\n\nCode\n# Select crucial columns and fill missing values where appropriate\ncleaned_nodes &lt;- mc3_data[[\"nodes\"]] %&gt;%\n  select(id, type, country, HeadOfOrg, revenue,ProductServices,PointOfContact,founding_date,TradeDescription,dob,\n         `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %&gt;%\n  mutate(HeadOfOrg = ifelse(is.na(HeadOfOrg), \"Unknown\", HeadOfOrg),\n         revenue = ifelse(is.na(revenue), 0, revenue))\n\n# Handle missing values in links\n# Select crucial columns and fill missing values where appropriate\ncleaned_links &lt;- mc3_data[[\"links\"]] %&gt;%\n  select(key,source, target, type, start_date, end_date, `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %&gt;%\n  mutate(start_date = ifelse(is.na(start_date), \"Unknown\", start_date),\n         end_date = ifelse(is.na(end_date), \"Unknown\", end_date))\n\n# Ensure proper data types\ncleaned_nodes &lt;- cleaned_nodes %&gt;%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\ncleaned_links &lt;- cleaned_links %&gt;%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.character(start_date),\n    end_date = as.character(end_date),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\n\n\n\nCheck for data types\n\n\nCode\n# Ensure correct data types for nodes\ncleaned_nodes &lt;- cleaned_nodes %&gt;%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n      dob = as.POSIXct(dob, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    founding_date=as.POSIXct(founding_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n    \n  )\n\n# Ensure correct data types for links\ncleaned_links &lt;- cleaned_links %&gt;%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.POSIXct(start_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    end_date = as.POSIXct(end_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\n# Print cleaned data for inspection\nglimpse(cleaned_nodes)\n\n\nRows: 60,520\nColumns: 15\n$ id                  &lt;chr&gt; \"Abbott, Mcbride and Edwards\", \"Abbott-Gomez\", \"Ab…\n$ type                &lt;chr&gt; \"Entity.Organization.Company\", \"Entity.Organizatio…\n$ country             &lt;chr&gt; \"Uziland\", \"Mawalara\", \"Uzifrica\", \"Islavaragon\", …\n$ HeadOfOrg           &lt;chr&gt; \"Émilie-Susan Benoit\", \"Honoré Lemoine\", \"Jules La…\n$ revenue             &lt;dbl&gt; 5994.73, 71766.67, 0.00, 0.00, 4746.67, 46566.67, …\n$ ProductServices     &lt;chr&gt; \"Unknown\", \"Furniture and home accessories\", \"Food…\n$ PointOfContact      &lt;chr&gt; \"Rebecca Lewis\", \"Michael Lopez\", \"Steven Robertso…\n$ founding_date       &lt;dttm&gt; 1954-04-24, 2009-06-12, 2029-12-15, 1972-02-16, 1…\n$ TradeDescription    &lt;chr&gt; \"Unknown\", \"Abbott-Gomez is a leading manufacturer…\n$ dob                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   &lt;chr&gt; \"Pelagia Alethea Mordoch\", \"Pelagia Alethea Mordoc…\n$ `_last_edited_date` &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       &lt;chr&gt; \"Existing Corporate Structure Data\", \"Existing Cor…\n$ `_algorithm`        &lt;chr&gt; \"Automatic Import\", \"Automatic Import\", \"Automatic…\n\n\nCode\nglimpse(cleaned_links)\n\n\nRows: 75,817\nColumns: 11\n$ key                 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ source              &lt;chr&gt; \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              &lt;chr&gt; \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ type                &lt;chr&gt; \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ start_date          &lt;dttm&gt; 2016-10-29, 2035-06-03, 2028-11-20, 2024-09-04, 2…\n$ end_date            &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   &lt;chr&gt; \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` &lt;dttm&gt; 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       &lt;dttm&gt; 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       &lt;chr&gt; \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        &lt;chr&gt; \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n\n\n\n\nChanging field name\n\n\nCode\ncleaned_nodes &lt;- cleaned_nodes %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\ncleaned_links&lt;- cleaned_links %&gt;%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\n\n\n\nSplit ‘type’ column into separate columns\nWe are going to tidy the type column by creating two columns “entity2,entity3”.\n\n\nCode\nword_list1 &lt;- strsplit(cleaned_nodes$type, \"\\\\.\")\nmax_elements1 &lt;- max(lengths(word_list1))\nword_list_padded1 &lt;- lapply(word_list1, \nfunction(x) c(x, rep(NA, max_elements1 - length(x))))\nword_df1 &lt;- do.call(rbind, word_list_padded1)\ncolnames(word_df1) &lt;- paste0(\"entity\", 1:max_elements1)\nword_df1 &lt;- as_tibble(word_df1) %&gt;%\n  select(entity2, entity3)\nclass(word_df1)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nThe steps below will be used to split text in type column into two columns\n\n\nCode\nword_list &lt;- strsplit(cleaned_links$type, \"\\\\.\")\nmax_elements &lt;- max(lengths(word_list))\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\nclass(word_df)\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nSince the output above is a matrix, the code chunk above is used to convert word_df into a tibble data.frame.\n\n\nCode\ncleaned_nodes &lt;- cleaned_nodes %&gt;%\n  cbind(word_df1)\n\n\n\n\nCode\ncleaned_links &lt;- cleaned_links %&gt;%\n  cbind(word_df)\n\n\nThe code chunk above appends the extracted columns back to edges tibble data.frame.\n\n\nCode\nwrite_rds(cleaned_nodes, \"data/rds/cleaned_nodes.rds\")\nwrite_rds(cleaned_links, \"data/rds/cleaned_links.rds\")\n\n\nabove code write into R rds file format."
  },
  {
    "objectID": "takehome/takehome3new.html#question-3",
    "href": "takehome/takehome3new.html#question-3",
    "title": "takehome3",
    "section": "Question 3",
    "text": "Question 3\nBy analyzing the ownership structure, we tracked changes in most influential individuals (VIP) networks over time, identifying key individuals with increasing influence.\n\nPart 1: Data Wrangling\nSplit the nodes into people and companies, and filter ownership-related edges\n\n\nCode\n# Split the nodes into people and companies\nnodes_people &lt;- cleaned_nodes %&gt;% filter(entity2 == \"Person\")\nnodes_company &lt;- cleaned_nodes %&gt;% filter(entity2 == \"Organization\")\n\n\n\n\nCode\n# Filter the links to include only ownership-related edges\nlinks_owns &lt;- cleaned_links %&gt;% filter(event2 == \"Owns\")\n\n\n\n\nCode\nnodes_people &lt;- nodes_people %&gt;%\n  rowwise() %&gt;%\n  mutate('no_owns' = sum(links_owns$source == id))\n\nnodes_people$no_owns &lt;- as.numeric(nodes_people$no_owns)\n\n\n\n\nCode\n# Calculate the unique counts of 'no_owns' and their corresponding counts and percentages\nowns_summary &lt;- nodes_people %&gt;%\n  group_by(no_owns) %&gt;%\n  summarise(count = n()) %&gt;%\n  mutate(percentage = (count / sum(count)) * 100)\n\n# Display the summary\nprint(owns_summary)\n\n\n# A tibble: 19 × 3\n   no_owns count percentage\n     &lt;dbl&gt; &lt;int&gt;      &lt;dbl&gt;\n 1       0   147    0.285  \n 2       1 46370   89.8    \n 3       2  4032    7.81   \n 4       3   665    1.29   \n 5       4   245    0.474  \n 6       5    80    0.155  \n 7       6    34    0.0658 \n 8       7    21    0.0407 \n 9       8    11    0.0213 \n10       9     7    0.0136 \n11      10     2    0.00387\n12      11     4    0.00774\n13      12     3    0.00581\n14      13     2    0.00387\n15      15     1    0.00194\n16      18     2    0.00387\n17      29     1    0.00194\n18      91    18    0.0349 \n19      92     4    0.00774\n\n\nTo define and identify influential people based on an ownership threshold. It filters the nodes to keep only those with a significant number of ownerships\n\n\nCode\n# Define the threshold for 'influential'\nvip_threshold &lt;- 91\n\n# Filter to keep only influential people and select relevant columns\nvip &lt;- nodes_people %&gt;%\n  filter(no_owns &gt;= vip_threshold) %&gt;%\n  select(id, country, dob, last_edited_date, date_added, no_owns)\n\n# Display the updated vip data frame\nglimpse(vip)\n\n\nRows: 22\nColumns: 6\nRowwise: \n$ id               &lt;chr&gt; \"Kelsey Ortega\", \"Joseph Gentry\", \"Cynthia Anderson\",…\n$ country          &lt;chr&gt; \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.…\n$ dob              &lt;dttm&gt; 1974-11-26, 1980-11-08, 1991-07-23, 2013-10-03, 1981…\n$ last_edited_date &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ date_added       &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ no_owns          &lt;dbl&gt; 91, 91, 91, 92, 91, 92, 91, 91, 91, 91, 91, 91, 91, 9…\n\n\nfilter the ownership connections to include only those involving these influential individuals\n\n\nCode\n# Filter links_owns to keep only those connections where the source is in the vip list\nvip_connections &lt;- links_owns %&gt;%\n  filter(source %in% vip$id)%&gt;%\n  select(source, target,start_date,end_date,last_edited_date, date_added)\n\n# Display the updated vip_connections data frame\nglimpse(vip_connections)\n\n\nRows: 2,006\nColumns: 6\n$ source           &lt;chr&gt; \"Kelsey Ortega\", \"Kelsey Ortega\", \"Kelsey Ortega\", \"K…\n$ target           &lt;chr&gt; \"Mitchell-Glover\", \"Anderson, Smith and Weber\", \"Orr …\n$ start_date       &lt;dttm&gt; 2017-08-11, 2028-12-13, 2016-09-18, 2034-12-16, 2032…\n$ end_date         &lt;dttm&gt; NA, NA, NA, NA, 2035-07-13, NA, NA, NA, NA, NA, NA, …\n$ last_edited_date &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ date_added       &lt;dttm&gt; 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n\n\n\n\nPart 1: Network Graph\nFinally, plot the network, highlighting the structure and connections of influential individuals.\n\n\nCode\n# Create graph from VIP connections\ng_vip &lt;- graph_from_data_frame(d = vip_connections, directed = TRUE)\n\n# Identify VIPs and Companies\nV(g_vip)$type &lt;- ifelse(V(g_vip)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip)$color &lt;- ifelse(V(g_vip)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip)$size &lt;- ifelse(V(g_vip)$type == \"VIP\", 8, 5)\n\n# Plot the network\nplot(g_vip, vertex.label = NA, vertex.size = V(g_vip)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip)$color, main = \"VIP Connections Network\")\n\n\n\n\n\n\n\n\n\nThe plot represents the VIP Connections Network, with blue nodes indicating influential VIPs and orange nodes representing companies they own. Directed edges illustrate ownership, pointing from VIPs to companies. This visualization highlights the dense centrality of VIPs, showcasing their extensive control across multiple companies. By examining these connections, we can infer the structure and extent of VIP influence within the network and help FishEye identify influential individuals within the business network, highlighting ownership structures and central figures. By tracking ownership changes over time, FishEye can pinpoint who controls companies involved in illegal fishing activities.\nWhile this plot provides a static snapshot, in the following we shall create similar plots for different time periods can reveal changes in ownership and influence over time.\n\n\nPart 2: Temporal Analysis\nAggregate Ownership Changes by Year\n\n\nCode\nchange_over_time1 &lt;- links_owns %&gt;%\n  group_by(start_date) %&gt;%\n  summarize(count = n()) %&gt;%\n  drop_na()\n\nlinks_owns&lt;- links_owns %&gt;%\n  mutate(start_year = format(start_date, \"%Y\"))\n\n# Aggregate ownership changes by year\nchange_over_time &lt;- links_owns %&gt;%\n  group_by(start_year) %&gt;%\n  summarize(count = n()) %&gt;%\n  drop_na()\n\n\nCreate plots to visualize the changes in ownership over time.\n\n\nCode\n# Plot changes over time\nggplot(change_over_time, aes(x = as.numeric(start_year), y = count)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Changes in Ownership Over Time\",\n       x = \"Year\",\n       y = \"Number of Ownership Changes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nPart 2: Network Graph by Year\nGiven the significant increase in data from 2004 onwards, focusing on every 10 years from 2005 to 2035 would provide a more detailed analysis of changes in ownership and influence.\n\n\nCode\n# Specify the year \nfilter_year &lt;- 2005\n\n# Filter vip_connections by start_year\nvip_connections_filtered &lt;- vip_connections %&gt;%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered &lt;- graph_from_data_frame(d = vip_connections_filtered, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered)$type &lt;- ifelse(V(g_vip_filtered)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered)$color &lt;- ifelse(V(g_vip_filtered)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered)$size &lt;- ifelse(V(g_vip_filtered)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2005&lt;-plot(g_vip_filtered, vertex.label = NA, vertex.size = V(g_vip_filtered)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered)$color, main = paste(\"VIP Connections Network for\", filter_year))\n\n\n\n\n\n\n\n\n\nIn 2005, the network shows a relatively sparse structure with a moderate number of connections. VIPs (blue nodes) are moderately interconnected, indicating a balanced distribution of influence among several key players.\n\n\nCode\n# Specify the year\nfilter_year &lt;- 2015\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2015 &lt;- vip_connections %&gt;%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2015 &lt;- graph_from_data_frame(d = vip_connections_filtered_2015, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2015)$type &lt;- ifelse(V(g_vip_filtered_2015)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2015)$color &lt;- ifelse(V(g_vip_filtered_2015)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2015)$size &lt;- ifelse(V(g_vip_filtered_2015)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2015 &lt;- plot(g_vip_filtered_2015, vertex.label = NA, vertex.size = V(g_vip_filtered_2015)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2015)$color, main = paste(\"VIP Connections Network for\", filter_year))\n\n\n\n\n\n\n\n\n\nBy 2015, the network has grown denser, suggesting increased interconnectedness and influence consolidation. More VIPs are connected to multiple companies (orange nodes), indicating a significant rise in their influence and control over the network.\n\n\nCode\n# Specify the year\nfilter_year &lt;- 2025\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2025 &lt;- vip_connections %&gt;%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2025 &lt;- graph_from_data_frame(d = vip_connections_filtered_2025, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2025)$type &lt;- ifelse(V(g_vip_filtered_2025)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2025)$color &lt;- ifelse(V(g_vip_filtered_2025)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2025)$size &lt;- ifelse(V(g_vip_filtered_2025)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2025 &lt;- plot(g_vip_filtered_2025, vertex.label = NA, vertex.size = V(g_vip_filtered_2025)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2025)$color, main = paste(\"VIP Connections Network for\", filter_year))\n\n\n\n\n\n\n\n\n\nThe network continues to expand in 2025, displaying even more complexity and interconnections. This period likely represents a peak in influence for several VIPs, with many of them owning shares in numerous companies, suggesting increased market control.\n\n\nCode\n# Specify the year\nfilter_year &lt;- 2035\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2035 &lt;- vip_connections %&gt;%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2035 &lt;- graph_from_data_frame(d = vip_connections_filtered_2035, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2035)$type &lt;- ifelse(V(g_vip_filtered_2035)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2035)$color &lt;- ifelse(V(g_vip_filtered_2035)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2035)$size &lt;- ifelse(V(g_vip_filtered_2035)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2035 &lt;- plot(g_vip_filtered_2035, vertex.label = NA, vertex.size = V(g_vip_filtered_2035)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2035)$color, main = paste(\"VIP Connections Network for\", filter_year))\n\n\n\n\n\n\n\n\n\nIn 2035, the network structure shifts to a star-like formation, where a central VIP appears to have gained substantial influence, with direct connections to numerous companies. This indicates a significant consolidation of power and influence, where a few key players dominate the network.\n\n\n\n\n\n\nCaution\n\n\n\nInitially, influence is distributed among several key players, but over the years, it becomes concentrated among fewer individuals, leading to a highly centralized network by 2035. This centralization of power can be both an opportunity for streamlined decision-making and a risk for monopolistic control. Monitoring these changes is crucial for regulatory bodies like FishEye to ensure fair practices and prevent illegal activities within the network."
  },
  {
    "objectID": "takehome/takehome3new.html#question-4",
    "href": "takehome/takehome3new.html#question-4",
    "title": "takehome3",
    "section": "Question 4",
    "text": "Question 4\nFor part 1, the focus was on identifying the network associated with SouthSeafood Express Corp and visualizing how this network and competing businesses changed as a result of their illegal fishing behavior.\n\nPart 1: Identify SouthSeafood Express Corp Node\n\nLocate the node representing SouthSeafood Express Corp in the network.\nCreate a visualization of the network associated with SouthSeafood Express Corp before any changes.\n\n\n\nCode\n# Extract edges connected to SouthSeafood Express Corp\nsouthseafood_edges &lt;- cleaned_links %&gt;%\n  filter(source == \"SouthSeafood Express Corp\" | target == \"SouthSeafood Express Corp\")%&gt;%\n  select(source,target,start_date,end_date,event2)\n\n# Ensure all nodes in the edge list are present in the vertex data frame\nsouthseafood_nodes &lt;- cleaned_nodes %&gt;%\n  filter(id %in% (c(southseafood_edges$source, southseafood_edges$target)))\n\n# Join edges with nodes to ensure all nodes are present\nsouthseafood_edges &lt;- southseafood_edges %&gt;%\n  filter(source %in% southseafood_nodes$id & target %in% southseafood_nodes$id)\n\n# Create graph object for the sub-network\ng_southseafood &lt;- graph_from_data_frame(d = southseafood_edges, vertices = southseafood_nodes, directed = TRUE)\n\n# Visualize the initial network\nplot(g_southseafood, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.5, \n     vertex.color = \"orange\", main = \"Network Associated with SouthSeafood Express Corp\")\n\n\n\n\n\n\n\n\n\n\n\nPart 1: Identify Competing Businesses\nIdentify and highlight competing businesses within the extracted sub-network.\n\n\nCode\ncompeting_businesses &lt;- cleaned_nodes %&gt;%\n  filter(entity3 == \"FishingCompany\" & id != \"SouthSeafood Express Corp\")\n\n\n\n\nCode\ncompeting_edges &lt;- cleaned_links %&gt;%\n  filter(source %in% competing_businesses$id | target %in% competing_businesses$id) %&gt;%\n  select(source, target, start_date, end_date, event2)\n\n# Combine SouthSeafood Express Corp edges with competing businesses edges\ncombined_edges &lt;- bind_rows(southseafood_edges, competing_edges)\n\n# Extract the combined set of nodes\ncombined_nodes &lt;- cleaned_nodes %&gt;%\n  filter(id %in% c(combined_edges$source, combined_edges$target))\n\n\n\n\nCode\n# Create graph object for the combined network\ng_combined &lt;- graph_from_data_frame(d = combined_edges, vertices = combined_nodes, directed = TRUE)\n\n\n\n\nPart 1: Analyze Temporal Changes based on start_year\n\nFilter the data to show the network before and after the illegal fishing incident(assume the incident happened in 2023)\nCreate visualizations to compare the network structure and connections before and after the incident.\n\n\n\nCode\n# Assume the accident happened in 2023\nincident_year &lt;- 2023\n\n# Filter edges before the incident\nedges_before &lt;- combined_edges %&gt;%\n  filter(format(start_date, \"%Y\") &lt; incident_year)\n\n# Filter edges after the incident\nedges_after &lt;- combined_edges %&gt;%\n  filter(format(start_date, \"%Y\") &gt;= incident_year)\n\n# Create graph objects for before and after the incident\ng_before &lt;- graph_from_data_frame(d = edges_before, vertices = combined_nodes, directed = TRUE)\ng_after &lt;- graph_from_data_frame(d = edges_after, vertices = combined_nodes, directed = TRUE)\n\n\n\n\nPart 1: Visualize the Temporal Changes\nIdentify and highlight significant changes in connections and structure due to the illegal fishing behavior and subsequent closure.\n\n\nCode\npar(mfrow = c(2, 1))\n\nplot_before &lt;- ggraph(g_before, layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = 0.8), show.legend = FALSE, color = \"gray\", width = 1) +\n  geom_node_point(aes(color = ifelse(name == \"SouthSeafood Express Corp\", \"SouthSeafood\", \n                                     ifelse(type == \"Entity.Organization.FishingCompany\", \"FishingCompany\", \"Other\"))), \n                  size = 3, alpha = 0.6, show.legend = TRUE) + # Adjusted alpha for transparency\n  scale_color_manual(values = c(\"SouthSeafood\" = \"red\", \"FishingCompany\" = \"blue\", \"Other\" = \"orange\"),\n                     name = \"Type\") + # Shortened legend title\n  theme_void() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Network Before Incident\")\n\n# Show the plot for the network before the incident\nplot_before\n\n\n\n\n\n\n\n\n\nCode\nplot_after &lt;- ggraph(g_after, layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = 0.8), show.legend = FALSE, color = \"gray\", width = 1) +\n  geom_node_point(aes(color = ifelse(name == \"SouthSeafood Express Corp\", \"SouthSeafood\", \n                                     ifelse(type == \"Entity.Organization.FishingCompany\", \"FishingCompany\", \"Other\"))), \n                  size = 3, alpha = 0.6, show.legend = TRUE) + # Adjusted alpha for transparency\n  scale_color_manual(values = c(\"SouthSeafood\" = \"red\", \"FishingCompany\" = \"blue\", \"Other\" = \"orange\"),\n                     name = \"Type\") + # Shortened legend title\n  theme_void() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Network After Incident\")\n\n# Show the plot for the network after the incident\nplot_after\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservations:\n\nThe number of blue nodes (fishing companies) appears to have decreased.\nSouthSeafood Express Corp (red node) remains central but its connections might have changed, indicating possible impact from the incident.\n\n\n\nFor part 2, since we cannot use revenue data over time, we will focus on identifying which companies potentially benefited from SouthSeafood Express Corp’s legal troubles by analyzing changes in network centrality measures.\n\n\nPart 2: Calculate Centrality Measures Before and After the Incident\n\n\nCode\n# Calculate degree centrality before the incident\ndegree_before &lt;- degree(g_before, mode = \"all\")\n\n# Calculate degree centrality after the incident\ndegree_after &lt;- degree(g_after, mode = \"all\")\n\n# Combine degree centrality measures into a data frame\ncentrality_change &lt;- data.frame(\n  id = names(degree_before),\n  degree_before = degree_before,\n  degree_after = degree_after\n)\n\n# Calculate the change in degree centrality\ncentrality_change &lt;- centrality_change %&gt;%\n  mutate(change = degree_after - degree_before)\n\n# Display companies with the most positive change in degree centrality\ntop_beneficiaries &lt;- centrality_change %&gt;%\n  arrange(desc(change)) %&gt;%\n  head(10)\n\nprint(top_beneficiaries)\n\n\n                                           id degree_before degree_after change\nAnderson-Roberts             Anderson-Roberts             0           36     36\nHall, Hartman and Hall Hall, Hartman and Hall             0           30     30\nKirk Inc                             Kirk Inc             0           18     18\nWatson-Gray                       Watson-Gray             0           18     18\nParker Inc                         Parker Inc             0           17     17\nMullins-Carrillo             Mullins-Carrillo             0           15     15\nTorres, Ross and Brown Torres, Ross and Brown             0           14     14\nByrd and Sons                   Byrd and Sons             0           13     13\nHaynes-Lucero                   Haynes-Lucero             0           13     13\nLutz-Fleming                     Lutz-Fleming             0           13     13\n\n\n\n\nPart 2: Determine Entity Type\n\n\nCode\n# Merge with cleaned_nodes to get the entity type\ntop_beneficiaries_info &lt;- top_beneficiaries %&gt;%\n  left_join(cleaned_nodes, by = c(\"id\" = \"id\")) %&gt;%\n  select(id, change,entity3)\n\n# Display the entity type of top beneficiaries\nprint(top_beneficiaries_info)\n\n\n                       id change        entity3\n1        Anderson-Roberts     36 FishingCompany\n2  Hall, Hartman and Hall     30 FishingCompany\n3                Kirk Inc     18 FishingCompany\n4             Watson-Gray     18 FishingCompany\n5              Parker Inc     17 FishingCompany\n6        Mullins-Carrillo     15 FishingCompany\n7  Torres, Ross and Brown     14 FishingCompany\n8           Byrd and Sons     13 FishingCompany\n9           Haynes-Lucero     13 FishingCompany\n10           Lutz-Fleming     13 FishingCompany\n\n\n\n\nPart 2: Visualize the Changes\n\n\nCode\n# Bar plot of top beneficiaries\nggplot(top_beneficiaries_info, aes(x = reorder(id, change), y = change)) +\n  geom_bar(stat = \"identity\", fill = \"lightblue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Top Beneficiaries by Change in Degree Centrality\",\n       x = \"Company\",\n       y = \"Change in Degree Centrality\",\n       fill = \"Entity Type\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe results show that the top beneficiaries, all classified as fishing companies, significantly increased their network centrality following SouthSeafood Express Corp’s legal troubles. Anderson-Roberts, Hall, Hartman and Hall, and Kirk Inc., among others, saw the largest gains, suggesting they capitalized on the shift in the network’s structure."
  },
  {
    "objectID": "takehome/takehome1.html",
    "href": "takehome/takehome1.html",
    "title": "Take-home Exercise 1:Singapore Private Residential Market",
    "section": "",
    "text": "Task\nIn this Take Home Exercise, a few compelling and insightful data visualizations for the Singapore private residential market and its sub-markets for the first quarter of 2024 are created using Quarto.\n\n\n\n\n\nflowchart LR\n  A[Data Preparation] --&gt; B[Data Summary]\n  B --&gt; C{Data Cleaning}\n  C --&gt; D[Market Overview Visualization 1: Trend of Average Unit Prices by Planning Region]\n  C --&gt; E[Market Overview Visualization 2: Popularity by Type of Sale]\n\n\n\n\n\n\n\n\nData Preparation\nData Source: private residential property transaction data from 1st January 2023 to 31st March 2024\nLoaded necessary libraries and set the working directory to source transaction data. Aggregated CSV files, collating rows to form a complete dataset. Performed initial data summary, extracting transaction count, date range, unique property types, and regions. Cleaned data, replacing empty values with NAs and converting numeric fields for insightful analysis.\n\n\nCode\npacman::p_load(ggplot2,lubridate,ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\nsetwd(\"C:/kekekay/ISSS608-VAA/takehome/data\")\nfull_data &lt;-  list.files(\n                    pattern = \"*.csv\",\n                    full.names=T) %&gt;%\n                    lapply(read_csv) %&gt;%\n                    bind_rows()\n\n\n\n\nData Summary\n\n\nCode\n# data summary\ntotal_transactions &lt;- nrow(full_data)\ndate_range &lt;- range(full_data$`Sale Date`, na.rm = TRUE)\nproperty_types &lt;- unique(full_data$`Property Type`)\ntotal_property_types &lt;- length(property_types)\nregion&lt;- unique(full_data$`Planning Region`)\narea&lt;- unique(full_data$`Planning Area`)\n\n\nTotal Transactions:26806\nDate Range is from 01 Apr 2023 to 31 Oct 2023\nTotal Unique Property Types: 6\nList of Property Types: Condominium, Executive Condominium, Terrace House, Semi-Detached House, Apartment, Detached House\n\n\n\nFive regions and planning area boundaries of Singapore were used in this study. Data source: URA (2021).\n\n\nPlanning Region: Central Region, East Region, North Region, North East Region, West Region\nPlanning Area: Bukit Merah, Bedok, Yishun, Sengkang, Hougang, Bukit Timah, Marine Parade, Clementi, Woodlands, Serangoon, Tanglin, Tampines, Kallang, Rochor, Novena, Punggol, Sembawang, Downtown Core, Bishan, Jurong West, Pasir Ris, Queenstown, Bukit Panjang, Bukit Batok, Museum, Newton, Southern Islands, Toa Payoh, Choa Chu Kang, Geylang, River Valley, Orchard, Singapore River, Outram, Tengah, Ang Mo Kio, Jurong East, Mandai, Sungei Kadut, Changi, Paya Lebar\n\n\nData Cleaning\n\n\nCode\ncleaned_data &lt;- full_data %&gt;%\n  mutate(across(c(`Nett Price($)`, `Area (SQM)`, `Unit Price ($ PSM)`), ~replace(., . == \"\" | . == \"-\", NA))) %&gt;%\n  mutate(\n    `Transacted Price ($)` = as.numeric(gsub(\",\", \"\", `Transacted Price ($)`)),\n    `Area (SQFT)` = as.numeric(`Area (SQFT)`),\n    `Unit Price ($ PSF)` = as.numeric(gsub(\",\", \"\", `Unit Price ($ PSF)`)),\n    `Sale Date` = dmy(`Sale Date`),\n    `Area (SQM)` = as.numeric(`Area (SQM)`),\n    `Unit Price ($ PSM)` = as.numeric(gsub(\",\", \"\", `Unit Price ($ PSM)`)),\n    `Nett Price($)` = ifelse(is.na(`Nett Price($)`),\n                             `Area (SQM)` * `Unit Price ($ PSM)`,\n                             as.numeric(gsub(\",\", \"\", `Nett Price($)`)))\n  )\n\n\n\n\n\n\n\n\nCode Explanation\n\n\n\n\n\n\nUse of across: The across() function is applied to check and replace empty or placeholder values across specified columns. It replaces any empty strings or ‘-’ with NA.\nCleaning and Converting Data: After the placeholders are handled, the script then cleans up currency and area fields, removing commas and converting them to numeric where necessary.\nConditional Calculation for Nett Price($): After ensuring all data types are correct and placeholders are handled, it calculates Nett Price($) where needed.\n\n\n\n\n\n\nMarket Overview Visualization 1: Trend of Average Unit Prices by Planning Region\n\nCentral RegionEast RegionNorth East RegionNorth RegionWest Region\n\n\n\n\nCode\np1 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"Central Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"Central Region: Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  # adjust strip text size\n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  # adjust x-axis text size\n    axis.ticks.length = unit(-3, \"pt\"),  #aAdjust tick length\n    panel.spacing = unit(1, \"lines\")  # adjust spacing between facets\n  )\n\np1\n\n\n\n\n\n\n\n\n\nIn the Central Region, Q1 2024 presents a stable pricing pattern for apartments, condominiums, and terrace houses, mirroring trends from the previous year. Conversely, detached houses experienced a significant rise in prices, followed by a pronounced dip, particularly within the sub-sale segment, which has now narrowed down to only resale transactions. It shows there was flutuation under Executive condominiums from March to December 2023, culminating in a complete absence of new sales in the subsequent quarter. Meanwhile, semi-detached houses witnessed a singular decline in June 2023, after which prices entered a gradual and steady climb, indicating a stabilizing market as progress through 2024.\n\n\n\n\nCode\np2 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"East Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"East Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  \n    axis.ticks.length = unit(-3, \"pt\"),  \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np2\n\n\n\n\n\n\n\n\n\nIn East Region, Apartments, condominiums and terrace houses have shown relative price stability, with condominiums displaying a slight uprend. Detached houses have seen erratic price movements with a sharp rise followed by a decline in sub-sale prices. Executive condominiums display notable price swings throughout the year, overall, it still demonstrates an upward price trend. In contrast, semi-detached houses show a significant dip year-end but recover to a gentle upward trend.\n\n\n\n\nCode\np3 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"North East Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"North East Region: Trend of Average Unit Prices\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  \n    axis.ticks.length = unit(-3, \"pt\"), \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np3\n\n\n\n\n\n\n\n\n\nIn the North East region, the fluctuation in the prices of detached houses is quite pronounced. Additionally, there’s a notable upward trend in the prices of executive condominiums, especially within the new sales category.\n\n\n\n\nCode\np4 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"North Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"North Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1), \n    axis.ticks.length = unit(-3, \"pt\"),  \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np4\n\n\n\n\n\n\n\n\n\nIn the North Region, apart from condominiums, other property types display considerable instability. However, as of March 2024, apartments, executive condominiums, and terrace houses continue to exhibit an increasing price trend.\n\n\n\n\nCode\np5 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"West Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"West Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1), \n    axis.ticks.length = unit(-3, \"pt\"), \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np5\n\n\n\n\n\n\n\n\n\nIn the West Region, December 2023 marked a notable uptick in the prices of new sale apartments, surging from approximately $19,000 PSM to $26,000 PSM, before settling back at $22,000 PSM. Conversely, detached and semi-detached houses demonstrated a downward pricing trend.\n\n\n\nIn summary, the Central Region commands the highest unit prices across the board, while the North Region is distinguished by the lowest. Typically, new sales achieve higher prices than sub-sales and resales. However, an exception is noted in the North East Region, where terrace houses experience the lowest prices in sub-sales. Furthermore, the North East and North Regions are both exhibiting an upward price trend as we progress through Q1 of 2024.\n\n\nMarket Overview Visualization 2: Popularity by Type of Sale\n\nPopularity Overview by Type of SaleNew SaleResaleSub Sale\n\n\n\n\nCode\n# number of transactions by type of sale\ntransactions_by_sale_type &lt;- cleaned_data %&gt;%\n  count(`Type of Sale`) %&gt;%\n  mutate(Percentage = n / sum(n) * 100, \n         Label = paste(`Type of Sale`, round(Percentage, 1), \"%\"))  # set label for each slice\n\n# Custom colors for the pie slices\nslice_colors &lt;- c(\"New Sale\" = \"darkseagreen\", \"Resale\" = \"lavender\", \"Sub Sale\" = \"pink\")\n\n# Create the pie chart\npie_chart &lt;- ggplot(transactions_by_sale_type, aes(x = \"\", y = Percentage, fill = `Type of Sale`)) +\n  geom_col(width = 1) +  # this is to create a bar for each slice with a width that ensures no gaps\n  coord_polar(theta = \"y\") + \n  scale_fill_manual(values = slice_colors) +  \n  geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +  # add labels of each slice\n  labs(\n    title = \"Popularity Overview by Type of Sale\",\n    x = NULL,\n    y = NULL,\n    fill = \"Type of Sale\"\n  ) +\n  theme_void() +  \n  theme(\n    legend.position = \"bottom\",  # legend postion\n    plot.title = element_text(hjust = 0.5)  # plot title position\n  )\n\npie_chart\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'New Sale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0))  \n\n# heatmap for 'New Sale'\nheatmap_new_sale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) +  \n  scale_fill_gradient(low = \"white\", high = \"darkseagreen\", name = \"Transactions\") + \n  labs(\n    title = \"Popularity of New Sale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better readability\n    legend.position = \"right\"  # legend position\n  )\n\nheatmap_new_sale\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'Resale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"Resale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0))  \n\n# Create the heatmap for 'Resale'\nheatmap_Resale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) +  \n  scale_fill_gradient(low = \"white\", high = \"lavender\", name = \"Transactions\") +  \n  labs(\n    title = \"Popularity of Resale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    legend.position = \"right\"  \n  )\n\nheatmap_Resale\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'Sub Sale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"Sub Sale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0)) \n\n# Create the heatmap for 'Sub Sale'\nheatmap_Sub_Sale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) + \n  scale_fill_gradient(low = \"white\", high = \"pink\", name = \"Transactions\") +  \n  labs(\n    title = \"Popularity of Sub-sale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    legend.position = \"right\"  \n  )\n\nheatmap_Sub_Sale\n\n\n\n\n\n\n\n\n\n\n\n\nMoving forward, we will explore transaction volumes to gauge popularity. Resale properties dominate the market, accounting for 62% of transactions, followed by new sales at 32.2% and sub-sales at 5.8%. Under both resale and new sale categories, condominiums and apartments in the Central Region are the most favored, while the North Region remains the least preferred. Interestingly, resale transactions show a preference for condominiums, whereas buyers of new sales are inclined towards apartments. In the case of sub-sales, the North East Region emerges as the most popular, with the Central Region trailing behind, yet the North Region consistently ranks as the least favored across all sales types."
  },
  {
    "objectID": "inclass/inclass02/inclass02.html",
    "href": "inclass/inclass02/inclass02.html",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "",
    "text": "Statistical graphic methods for visualising distribution using ggplot2 and its extensions for:\n\nRidgeline plot\nRaincloud plot"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#loading-r-packages",
    "href": "inclass/inclass02/inclass02.html#loading-r-packages",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Loading R packages",
    "text": "Loading R packages\nNote: Ensure that the pacman package has already been installed.\nThe code chunk below uses p_load() of pacman package to load the tidyverse family of packages.\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#importing-the-data",
    "href": "inclass/inclass02/inclass02.html#importing-the-data",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports Exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_df &lt;- read_csv(\"data/Exam_data.csv\")\n\nexam_data contains:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#varying-fill-colours-along-the-x-axis",
    "href": "inclass/inclass02/inclass02.html#varying-fill-colours-along-the-x-axis",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Varying Fill Colours along the X-axis",
    "text": "Varying Fill Colours along the X-axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis.\nTo achieve varying fill colours:\n\ngeom_ridgeline_gradient()\ngeom_density_ridges_gradient()\n\nHowever, they do not allow for alpha transparency.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [°C]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#mapping-probabilities-directly-onto-colour",
    "href": "inclass/inclass02/inclass02.html#mapping-probabilities-directly-onto-colour",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Mapping Probabilities directly onto colour",
    "text": "Mapping Probabilities directly onto colour\nStat function called stat_density_ridges() replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nInclude the argument calc_ecdf = TRUE in stat_density_ridges()!\n\n\n\nRidgeline Plots with Quantile Lines\nRidgeline plots can be coloured by quantile using geom_density_ridges_gradient(), via the calculated stat(quantile) \n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nQuantiles can also be specified by cut points e.g. 2.5% and 97.5% tails to colour the ridgeline plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#plotting-a-half-eye-graph",
    "href": "inclass/inclass02/inclass02.html#plotting-a-half-eye-graph",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\nPlot a Half-Eye graph by using stat_halfeye() of ggdist package, producing a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRemove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#adding-the-boxplot",
    "href": "inclass/inclass02/inclass02.html#adding-the-boxplot",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Adding the boxplot",
    "text": "Adding the boxplot\nThe second geometry layer i.e. a narrow boxplot is produced using geom_boxplot() of ggplot2 This produces a narrow boxplot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#adding-the-dot-plots",
    "href": "inclass/inclass02/inclass02.html#adding-the-dot-plots",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Adding the Dot Plots",
    "text": "Adding the Dot Plots\nThe third geometry layer is added using stat_dots() of ggdist package. This produces a half-dotplot, similar to a histogram that indicates the number of samples (number of dots) in each bin. Use side = “left” to specify the dot plots on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#finishing-touch",
    "href": "inclass/inclass02/inclass02.html#finishing-touch",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Finishing touch",
    "text": "Finishing touch\n coord_flip() of ggplot2 package is used to flip the raincloud chart horizontally to give it the raincloud appearance. theme_economist() of ggthemes package is also used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nggstatsplotis an extension of ggplot2 package for creating graphics with details from statstical tests included in the plots themselces\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#importing-the-data",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#importing-the-data",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is a pacakge within tidyverse.\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nexam_data tibble data frame contains:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#one-sample-test-gghistostats-method",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234) # for reproducibility\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#unpacking-the-bayes-factor",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Unpacking the Bayes Factor",
    "text": "Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. i.e., a measure of the strength of evidence in favor of one theory among two competing theories.\nBayes factor allows evaluation of the data in favor of a null hypothesis, and to use external information to do so. It gives the weight of the evidence in favor of a given hypothesis.\nWhen comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10, defined mathematically as:\n\\(\\frac{likelihood of data given H_{1}}{likelihood of data given H_{0}} = \\frac{P(D|H_{1})}{P(D|H_{0})}\\)\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\nInterpreting Bayes Factor\nA Bayes Factor can be any positive number. A common interpretation was first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nB10 Value\nConclusion\n\n\n\n\n&gt;100\nExtreme evidence for H1\n\n\n30-100\nVery strong evidence for H1\n\n\n10-30\nStrong evidence for H1\n\n\n3-10\nModerate evidence for H1\n\n\n1-3\nAnecdotal evidence for H1\n\n\n1\nNo evidence\n\n\n1/3-1\nAnecdotal evidence for H1\n\n\n1/3-1/10\nModerate evidence for H1\n\n\n1/10-1/30\nStrong evidence for H1\n\n\n1/30-1/100\nVery strong evidence for H1\n\n\n&lt;1/100\nExtreme evidence for H1"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Two-sample mean test: ggbetweenstats()",
    "text": "Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Oneway ANOVA Test: ggbetweenstats() method",
    "text": "Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nggbetweenstats - Summary of tests\nFollowing (between-subjects) tests are carried out for each type of analyses:\n\n\n\n\n\n\n\n\nType\nNo. of groups\nTest\n\n\n\n\nParametric\n&gt;2\nFisher’s or Welch’s one-way ANOVA\n\n\nNon-parametric\n&gt;2\nKruskal-Wallis one-way ANOVA\n\n\nRobust\n&gt;2\nHeteroscedastic one-way ANOVA for trimmed means\n\n\nBayes Factor\n&gt;2\nFisher’s ANOVA\n\n\nParametric\n2\nStudent’s or Welch’s t-test\n\n\nNon-parametric\n2\nMann-Whitney U test\n\n\nRobust\n2\nYuen’s test for trimmed means\n\n\nBayes Factor\n2\nStudent’s t-test\n\n\n\nFollowing effect sizes (and confidence intervals) are available for each type of test:\n\n\n\n\n\n\n\n\n\nType\nNo. of Groups\nEffect Size\nConfidence Intervals\n\n\n\n\nParametric\n&gt;2\n\\({\\eta^2}_{p},\\eta^2,{\\omega^2}_{p},\\omega^2\\)\nYes\n\n\nNon-parametric\n&gt;2\n\\({\\eta^2}_{H}\\) (H-statistic based eta-squared)\nYes\n\n\nRobust\n&gt;2\n\\(\\xi\\) (Explanatory measure of effect size)\nYes\n\n\nBayes Factor\n&gt;2\nNo\nNo\n\n\nParametric\n2\nCohen’s d, Hedge’s g (central-and-noncentral-t distribution based)\nYes\n\n\nNon-parametric\n2\nr (computed as \\(Z/\\sqrt{N}\\))\nYes\n\n\nRobust\n2\n\\(\\xi\\) (Explanatory measure of effect size)\nYes\n\n\nBayes Factor\n2\nNo\nNo\n\n\n\nSummary of pairwise comparison tests supported in ggbetweenstats\n\n\n\n\n\n\n\n\n\nType\nEqual Variance\nTest\np-value Adjustment?\n\n\n\n\nParametric\nNo\nGames Howell Test\nYes\n\n\nParametric\nYes\nStudent’s t Test\nYes\n\n\nNon-Parametric\nNo\nDunn Test\nYes\n\n\nRobust\nNo\nYuen’s Trimmed Means Test\nYes\n\n\nBayes Factor\nNA\nStudent’s t Test\nNA"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Significant Test of Correlation: ggscatterstats()",
    "text": "Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut(). ggbarstats() is used to build a visual for Significant Test of Association\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-models",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-models",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Visualising Models",
    "text": "Visualising Models\nVisualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#installing-and-loading-the-required-libraries-1",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#installing-and-loading-the-required-libraries-1",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\nImporting Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#multiple-regression-model-using-lm",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Multiple Regression Model using lm()",
    "text": "Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Model Diagnostic: checking for multicolinearity:",
    "text": "Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Model Diagnostic: checking normality assumption",
    "text": "Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Model Diagnostic: Check model for homogeneity of variances",
    "text": "Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-complete-check",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Model Diagnostic: Complete check",
    "text": "Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-regression-parameters-see-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Visualising Regression Parameters: see methods",
    "text": "Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_1.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4 - Visual Statistical Analysis",
    "section": "Visualising Regression Parameters: ggcoefstats() methods",
    "text": "Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#importing-the-data",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#importing-the-data",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is a pacakge within tidyverse.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nexam_data tibble data frame contains:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. \nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Displaying multiple information on tooltip",
    "text": "Displaying multiple information on tooltip\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7. By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#customising-tooltop-style",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#customising-tooltop-style",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Customising Tooltop style",
    "text": "Customising Tooltop style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor more customisations, refer to Customizing girafe objects"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Hover effect with data_id aesthetic",
    "text": "Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#styling-hover-effect",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#styling-hover-effect",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Styling hover effect",
    "text": "Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#plot-1-combining-tooltip-and-hover-effect",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#plot-1-combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Plot 1: Combining tooltip and hover effect",
    "text": "Plot 1: Combining tooltip and hover effect\nThe tooltip and hover effects are combined in the interactive statistical graph in the code chunk below.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#click-effect-with-onclick",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Click effect with onclick",
    "text": "Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.\nThe code chunk below shown an example of onclick.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nClick actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Coordinated Multiple Views with ggiraph",
    "text": "Coordinated Multiple Views with ggiraph\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#there-are-two-ways-to-create-interactive-graph-by-using-plotly-they-are",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#there-are-two-ways-to-create-interactive-graph-by-using-plotly-they-are",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "There are two ways to create interactive graph by using plotly, they are:",
    "text": "There are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Creating an interactive scatter plot: plot_ly() method",
    "text": "Creating an interactive scatter plot: plot_ly() method\nThe code chunk below shows an example a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Working with visual variable: plot_ly() method",
    "text": "Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Creating an interactive scatter plot: ggplotly() method",
    "text": "Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Interactive Data Visualisation - crosstalk methods",
    "text": "Interactive Data Visualisation - crosstalk methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#linked-brushing-crosstalk-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_1.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3 - I Programming Interactive Data Visualisation with R",
    "section": "Linked brushing: crosstalk method",
    "text": "Linked brushing: crosstalk method\nCode chunk below is used to implement coordinated brushing.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html",
    "title": "Hands-on ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse pakcges are installed in the computer. If yes, then they will be launched into R environment.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\ngetwd()\n\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex1\"\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n\n\n\nCode\nggplot(data = exam_data,\n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#install-and-launching-r-packages",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#install-and-launching-r-packages",
    "title": "Hands-on ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse pakcges are installed in the computer. If yes, then they will be launched into R environment.\n\n\nCode\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#checking-working-directory-and-importing-data",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#checking-working-directory-and-importing-data",
    "title": "Hands-on ex1",
    "section": "",
    "text": "Code\ngetwd()\n\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex1\"\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#plotting-a-simple-bar-chart",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#plotting-a-simple-bar-chart",
    "title": "Hands-on ex1",
    "section": "",
    "text": "Code\nggplot(data = exam_data,\n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#comparison-of-base-r-and-ggplot-plot",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#comparison-of-base-r-and-ggplot-plot",
    "title": "Hands-on ex1",
    "section": "2.1 Comparison of Base R and ggplot plot",
    "text": "2.1 Comparison of Base R and ggplot plot\n\nCode\nlibrary(ggplot2)\n\n#R graphic \nhist(exam_data$MATHS)\n\n#ggplot\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\n\nWhile both approaches achieve similar results, the ggplot2 version can be easily modified and extended with additional layers, themes, and scales without fundamentally altering the underlying code structure. more suitable for complex visualization."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#call-the-ggplot-function",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#call-the-ggplot-function",
    "title": "Hands-on ex1",
    "section": "3.1 call the ggplot() function",
    "text": "3.1 call the ggplot() function\n\n\nCode\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#adding-in-x-axis-and-the-axiss-label",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#adding-in-x-axis-and-the-axiss-label",
    "title": "Hands-on ex1",
    "section": "3.2 adding in x-axis and the axis’s label",
    "text": "3.2 adding in x-axis and the axis’s label\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on ex1",
    "section": "3.3 Essential Grammatical Elements in ggplot2: geom",
    "text": "3.3 Essential Grammatical Elements in ggplot2: geom\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom_bar VS geom_dotplot vs geom_histogram()\" \n\n#| fig-subcap: \n#| - \"plots a bar chart by using geom_bar()\" \n\n#| - \"geom_dotplot() of ggplot2 is used to plot a dot plot\" \n#| - \"turn off the y-axis &  change the binwidth to 2.5\"\n#| - \"create a simple histogram\"\n#| layout-ncol: 4 \n#| column: page\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\n\n\n\n\n\n\nFigure 3\n\n\n\n\n\n\n\n\n\n\n\nFigure 4\n\n\n\n\n\n\n\nCode\n#| fig-cap: \"Modifying a Geometric Object \" \n\n#| fig-subcap: \n#| - \"by changing geom()\" \n\n#| - \"by changing aes()\" \n\n#| layout-ncol: 2\n#| column: page\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\nFigure 5\n\n\n\n\n\n\n\n\n\n\n\nFigure 6\n\n\n\n\n\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom-density() VS geom_boxplot()\" \n\n#| fig-subcap: \n#| - \"geom-density() computes and plots kernel density estimate\" \n\n#| - \"two kernel density lines by using colour or fill arguments of aes()\" \n#| - \"geom_boxplot() displays continuous value list\"\n#| - \"adding notch to help visually assess whether the medians of distributions differ\"\n#| layout-ncol: 4 \n#| column: page\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)    \n\n\n\n\n\n\n\n\nFigure 7\n\n\n\n\n\n\n\n\n\n\n\nFigure 8\n\n\n\n\n\n\n\n\n\n\n\nFigure 9\n\n\n\n\n\n\n\n\n\n\n\nFigure 10\n\n\n\n\n\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom_violin VS geom_point()\" \n\n#| fig-subcap: \n#| - \"geom_violin is designed for creating violin plot to compare several distributions side by side\" \n\n#| - \"geom_point() is especially useful for creating scatterplot\" \n\n#| layout-ncol: 2\n#| column: page\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\nFigure 11\n\n\n\n\n\n\n\n\n\n\n\nFigure 12"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#combine-geom-objects",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#combine-geom-objects",
    "title": "Hands-on ex1",
    "section": "3.4 Combine geom objects",
    "text": "3.4 Combine geom objects\nplot the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on ex1",
    "section": "3.5 Essential Grammatical Elements in ggplot2: stat",
    "text": "3.5 Essential Grammatical Elements in ggplot2: stat\n\n3.5.1 Working with stat()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n3.5.2 using stat_summary() function and overriding the default geom\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\n3.5.3 using geom_() function and overriding the default stat\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)  \n\n\n\n\n\n\n\n\n\n\n\n3.5.4 adding a best fit curve on a scatterplot\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\n3.5.5 override default smoothing method from loess to linear model\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on ex1",
    "section": "3.6 Essential Grammatical Elements in ggplot2: Facets",
    "text": "3.6 Essential Grammatical Elements in ggplot2: Facets\n\n3.6.1 Working with facet_wrap()\nThe facet_grid() function create a grid of plots by specifying rows and columns based on factors.\n\n\nCode\n# Assuming exam_data is already loaded and contains columns MATHS and CLASS\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(CLASS ~ .)  # CLASS variable defines the rows\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(. ~ CLASS)  # CLASS variable defines the columns\n\n\n\n\n\n\n\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on ex1",
    "section": "3.7 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "3.7 Essential Grammatical Elements in ggplot2: Coordinates\n\n3.7.1 Working with Coordinate\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n3.7.2 flips the horizontal bar chart into vertical bar chart by using coord_flip()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n3.7.3 Changing the y- and x-axis range\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n3.7.4 fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on ex1",
    "section": "3.8 Essential Grammatical Elements in ggplot2: themes",
    "text": "3.8 Essential Grammatical Elements in ggplot2: themes\n\n3.8.1 Working with theme\n\n\nPlotData\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot with theme_gray()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nCode\n# Plot with theme_classic()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nCode\n# Plot with theme_minimal()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "before_class.html",
    "href": "before_class.html",
    "title": "ISSS608-VA",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\ngetwd()\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex2\"\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\n\n\n\nPlotCode\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotCode\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nLets try The Wall Street Journal.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 8,\n              base_size = 20,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\nhow to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nprint(p1)\n\n\n\n\n\n\n\nprint(p2)\n\n\n\n\n\n\n\nprint(p3)\n\n\n\n\n\n\n\n\n\n\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nWith inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np\n\nA grob, ggplot, patchwork, formula, raster, or nativeRaster object to add as an inset\n\nleft, bottom, right, top\n\nnumerics or units giving the location of the outer bounds. If given as numerics they will be converted to npc units.\n\nalign_to\n\nSpecifies what left, bottom, etc should be relative to. Either 'panel' (default), 'plot', or 'full'.\n\non_top\n\nLogical. Should the inset be placed on top of the other plot or below (but above the background)?\n\nclip\n\nLogical. Should clipping be performed on the inset?\n\nignore_tag\n\nLogical. Should autotagging ignore the inset?\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#importing-data",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "getwd()\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex2\"\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "PlotCode\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-themes",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "PlotCode\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nLets try The Wall Street Journal.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 8,\n              base_size = 20,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-single-graph",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nprint(p1)\n\n\n\n\n\n\n\nprint(p2)\n\n\n\n\n\n\n\nprint(p3)\n\n\n\n\n\n\n\n\n\n\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nWith inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np\n\nA grob, ggplot, patchwork, formula, raster, or nativeRaster object to add as an inset\n\nleft, bottom, right, top\n\nnumerics or units giving the location of the outer bounds. If given as numerics they will be converted to npc units.\n\nalign_to\n\nSpecifies what left, bottom, etc should be relative to. Either 'panel' (default), 'plot', or 'full'.\n\non_top\n\nLogical. Should the inset be placed on top of the other plot or below (but above the background)?\n\nclip\n\nLogical. Should clipping be performed on the inset?\n\nignore_tag\n\nLogical. Should autotagging ignore the inset?\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#terminology",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#terminology",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Terminology",
    "text": "Terminology\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The settings that control how the animation behaves. For example:\n\nDuration of each frame\nEasing function used between frame transitions\nStart the animation from the current frame or from the beginning"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#importing-the-data",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#importing-the-data",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports GlobalPopulation.xlsx into R environment by using read_xls() function of readr package.\nreadr is a pacakge within tidyverse.\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nTip\n\n\n\nInstead of using mutate_at(), across() can be used to derive the same output"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-a-static-population-bubble-plot",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Building a static population bubble plot",
    "text": "Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-the-animated-bubble-plot",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Building the animated bubble plot",
    "text": "Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics.\n\nThe default is linear.\nOther methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Building an animated bubble plot: ggplotly() method",
    "text": "Building an animated bubble plot: ggplotly() method\nCreate an animated bubble plot by using ggplotly() method.\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nAlthough show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands_on_exercise/Hands_on_ex3/Hands-on_Ex03_2.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3 - Programming Animated Statistical Graphics with R",
    "section": "Building an animated bubble plot: plot_ly() method",
    "text": "Building an animated bubble plot: plot_ly() method\nCreate an animated bubble plot by using plot_ly() method.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "inclass/inclass01/inclass01.html",
    "href": "inclass/inclass01/inclass01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n#prior setting of folders is important \n#if use read.csv then outcome wont be a tibl format, all the column names are changed"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "takehome/takehome2.html#step-1-load-library-and-data",
    "href": "takehome/takehome2.html#step-1-load-library-and-data",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 1: Load library and data",
    "text": "Step 1: Load library and data\n\n\nCode\n# Load library for data manipulation\n\npacman::p_load(ggplot2,plotly,dplyr,tidyverse,ggrepel)\n\n# Load in Data\n\nsetwd(\"C:/kekekay/ISSS608-VAA/takehome/data\")\nfull_data &lt;-  list.files(\n                    pattern = \"*.csv\",\n                    full.names=T) %&gt;%\n                    lapply(read_csv) %&gt;%\n                    bind_rows()"
  },
  {
    "objectID": "takehome/takehome2.html#step-2-aggregate-data-count-transactions-per-property-type",
    "href": "takehome/takehome2.html#step-2-aggregate-data-count-transactions-per-property-type",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 2: Aggregate Data: Count transactions per property type",
    "text": "Step 2: Aggregate Data: Count transactions per property type\n\n\nCode\ntransaction_counts &lt;- full_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')  \n\n# percentages for labels\ntransaction_counts &lt;- transaction_counts %&gt;%\n  mutate(Percentage = Transactions / sum(Transactions) * 100)"
  },
  {
    "objectID": "takehome/takehome2.html#step-3-use-ggplot2-to-create-a-pie-chart-representing-the-number-of-transactions-for-each-property-type",
    "href": "takehome/takehome2.html#step-3-use-ggplot2-to-create-a-pie-chart-representing-the-number-of-transactions-for-each-property-type",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 3: Use ggplot2 to create a pie chart representing the number of transactions for each property type",
    "text": "Step 3: Use ggplot2 to create a pie chart representing the number of transactions for each property type\n\n\nCode\ncolors &lt;- c(\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\", \"#b3de69\")\n\nggplot(transaction_counts, aes(x = \"\", y = Transactions, fill = `Property Type`)) +\n  geom_bar(stat = \"identity\", width = 4, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = colors) +\n  geom_label_repel(\n    aes(label = sprintf(\"%s (%.1f%%)\", `Property Type`, Percentage)),\n    nudge_x = 2 * cos(seq(0, 2 * pi, length.out = nrow(transaction_counts) + 1)[-nrow(transaction_counts) - 1]),  # Adjust for radial placement\n    nudge_y = 1 * sin(seq(0, 2 * pi, length.out = nrow(transaction_counts) + 1)[-nrow(transaction_counts) - 1]),  # Adjust for radial placement\n    arrow = arrow(length = unit(0.02, \"npc\"), type = \"closed\", ends = \"last\"),\n    size = 4,  # Adjust font size for readability\n    color = \"black\"\n  ) +\n  labs(title = \"No. of Transactions by Property Type\") +\n  theme_void() +\n  theme(legend.position = \"none\")  \n\n\n\n\n\n\n\n\n\nSince condominiums and apartments account for the highest number of transactions, we will conduct a detailed market analysis of their unit prices per square foot.\n\nCondominiumApartment\n\n\n\n\nCode\n# Filter data for only Condominiums\ncondo_data &lt;- full_data %&gt;%\n  filter(`Property Type` == \"Condominium\")\n\n# Sampling data\nsampled_data &lt;- condo_data[sample(nrow(condo_data), 500), ]\nsampled_data$`Transacted Price ($)` &lt;- sampled_data$`Transacted Price ($)` / 1000\n\n# Calculate Price per Sq ft\nsampled_data$`Price per Sq ft` &lt;- sampled_data$`Transacted Price ($)` / sampled_data$`Area (SQFT)`\n\n# Create the ggplot\nP3 &lt;- ggplot(data = sampled_data, aes(x = `Area (SQFT)`, y = `Transacted Price ($)`, size = `Price per Sq ft`, color = `Type of Sale`, \n                                      text = paste(\"Price: \", `Transacted Price ($)`, \"k&lt;br&gt;Area: \", `Area (SQFT)`, \n                                                   \"sqft&lt;br&gt;Type of Sale: \", `Type of Sale`, \n                                                   \"&lt;br&gt;Price per Sq ft: $\", round(`Price per Sq ft`, 2), \"/sqft\"))) +\n  geom_point(alpha = 0.3) +  # Increased transparency\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_size_area(max_size = 5) +  # Area scaled size for proportional visibility\n  scale_x_continuous(limits = c(200, 4000), breaks = seq(400, 4000, by = 200)) +\n  scale_y_continuous(limits = c(0, 10000)) +\n  labs(x = \"Condominium Size (sq ft)\", y = \"Sale Price (in $000)\",\n       title = \"Market Analysis: Unit Price(Sqft) for Condominiums\") +\n  guides(size = guide_legend(title = \"Price per Sq ft\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        panel.grid.major = element_line(color = \"gray\", size = 0.5),\n        panel.grid.minor = element_line(color = \"lightgray\", size = 0.25),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to interactive plot\nP3_interactive &lt;- ggplotly(P3, tooltip = \"text\")\n\n# Print the interactive plot\nP3_interactive\n\n\n\n\n\n\nThe plot legend indicates that resale properties generally have the lowest unit prices, as illustrated by the smaller size of the points. Resale transactions, which predominantly occur within the 400-1800 sq ft range, do not necessarily become more expensive with increased size, highlighting a non-linear pricing structure for larger properties.\nConversely, new sales show a clearer trend where larger units command higher prices per square foot, though the maximum size for new condominiums caps at 2400 sq ft, smaller compared to resales which extend up to 3600 sq ft.\nSubsales display relatively stable pricing, ranging from $1.62 to $2.25 per sq ft, which suggests a less volatile segment within the condominium market.\n\n\n\n\nCode\n# Filter data for only apartments\nap_data &lt;- full_data %&gt;% \n  filter(`Property Type` == \"Apartment\")\n\n# Sampling data\nsampled_data1 &lt;- ap_data[sample(nrow(ap_data), 500), ]\nsampled_data1$`Transacted Price ($)` &lt;- sampled_data1$`Transacted Price ($)` / 1000\n\n# Calculate Price per Sq ft\nsampled_data1$`Price per Sq ft` &lt;- sampled_data1$`Transacted Price ($)` / sampled_data1$`Area (SQFT)`\n\n# Create the ggplot\np2 &lt;- ggplot(data = sampled_data1, aes(x = `Area (SQFT)`, y = `Transacted Price ($)`, size = `Price per Sq ft`, color = `Type of Sale`, \n                                      text = paste(\"Price: \", `Transacted Price ($)`, \"k&lt;br&gt;Area: \", `Area (SQFT)`, \n                                                   \"sqft&lt;br&gt;Type of Sale: \", `Type of Sale`, \n                                                   \"&lt;br&gt;Price per Sq ft: $\", round(`Price per Sq ft`, 2), \"/sqft\"))) +\n  geom_point(alpha = 0.3) +  # Increased transparency\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_size_area(max_size = 5) +  # Area scaled size for proportional visibility\n  scale_x_continuous(limits = c(200, 4000), breaks = seq(400, 4000, by = 200)) +\n  scale_y_continuous(limits = c(0, 10000)) +\n  labs(x = \"Apartment Size (sq ft)\", y = \"Sale Price (in $000)\",\n       title = \"Market Analysis: Unit Price(Sqft) for Apartment\") +\n  guides(size = guide_legend(title = \"Price per Sq ft\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        panel.grid.major = element_line(color = \"gray\", size = 0.5),\n        panel.grid.minor = element_line(color = \"lightgray\", size = 0.25),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to interactive plot\np2_interactive &lt;- ggplotly(p2, tooltip = \"text\")\n\n# Print the interactive plot\np2_interactive\n\n\n\n\n\n\nWhen comparing apartments to condominiums, apartments tend to be smaller in size, which could explain their generally lower transaction prices.\nThe pricing trends for apartments largely mirror those observed in condominiums, with the exception of some notable differences in the resale market for larger units. Specifically, resale apartments larger than 2000 sq ft exhibit significant variability in unit price. A striking example is a 3100 sq ft unit priced at an unusually low $0.98 per sq ft, which stands out as a potential outlier. This outlier may warrant further investigation to determine underlying factors that contribute to such an anomalously low unit price, such as location disadvantages, property condition, or market anomalies at the time of sale.\n\n\n\n\n\n\n\n\n\n\nTips of Interactive Features:\n\n\n\n\nUse the “Autoscale” button to automatically adjust the plot scale to fit within the view. This ensures all data is visible after zooming in or out.\nClick on legend entries to toggle the visibility of data points for each type of sale.\nHover over any data point to see detailed information, such as the price, area, type of sale, and price per square foot. This provides immediate insights without additional data references.\nThe size of each point indicates the price per square foot; larger points denote higher prices, allowing for quick visual assessment of property values.\nMove your cursor along the x-axis to compare data points from different types of sales at the same condominium size. This hover comparison helps identify trends and outliers within specific size ranges."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nstrapgod (NA    -&gt; ea2b1ecfc...) [GitHub]\nrlang    (1.1.3 -&gt; 1.1.4       ) [CRAN]\ncli      (3.6.2 -&gt; 3.6.3       ) [CRAN]\nstringi  (1.8.3 -&gt; 1.8.4       ) [CRAN]\nfarver   (2.1.1 -&gt; 2.1.2       ) [CRAN]\nmvtnorm  (1.2-4 -&gt; 1.2-5       ) [CRAN]\nrlang   (1.1.3 -&gt; 1.1.4) [CRAN]\ncli     (3.6.2 -&gt; 3.6.3) [CRAN]\nstringi (1.8.3 -&gt; 1.8.4) [CRAN]\npackage 'rlang' successfully unpacked and MD5 sums checked\npackage 'cli' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\idrin\\AppData\\Local\\Temp\\Rtmp2HmPAQ\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\idrin\\AppData\\Local\\Temp\\Rtmp2HmPAQ\\remotes6c3c22a36614\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\npackage 'rlang' successfully unpacked and MD5 sums checked\npackage 'cli' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\npackage 'farver' successfully unpacked and MD5 sums checked\npackage 'mvtnorm' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\idrin\\AppData\\Local\\Temp\\Rtmp2HmPAQ\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\idrin\\AppData\\Local\\Temp\\Rtmp2HmPAQ\\remotes6c3c17373177\\wilkelab-ungeviz-aeae12b/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#importing-the-data",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#importing-the-data",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is a pacakge within tidyverse.\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nexam_data tibble data frame contains:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, e.g., mean. Uncertainty, is expressed as standard error, confidence interval, or credible interval.\nThe code chunk below will be used to derive the necessary summary statistics.\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nThe code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nTableCode\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\nknitr::kable(head(my_sum), format = 'html')"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Plotting standard error bars of point estimates",
    "text": "Plotting standard error bars of point estimates\nThe code chunk belows plots the standard error bars of mean maths score by race.\nNote:\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Plotting confidence interval of point estimates",
    "text": "Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, the confidence intervals of mean maths score by race can also be plotted.\nNote:\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "Visualizing the uncertainty of point estimates with interactive error bars\nThe code chunk below plots interactive error bars for the 99% confidence interval of mean maths score by race.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-ggdist-package",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualising Uncertainty: ggdist package",
    "text": "Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist)."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nIn the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\nThe plot below shows 95% and 99% confidence intervals\n\nstat_pointinterval is used twice, once for each confidence interval.\nThe .width argument specifies the width of the intervals.\nThe .point argument specifies that we want to plot the median.\nThe .interval argument is set to “quantile” to indicate quantile-based intervals.\nscale_colour_manual is used to set custom colors for the confidence intervals and provide custom labels.\nOther aesthetic adjustments are made to improve the appearance of the plot, such as adjusting the size and position of the intervals.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"95% CI\")) +\n  stat_pointinterval(\n    .width = 0.99,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"99% CI\")) +\n  scale_colour_manual(\n    values = c(\"95% CI\" = \"blue\", \"99% CI\" = \"red\"),\n    labels = c(\"95% CI\", \"99% CI\")) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualising the uncertainty of point estimates: ggdist methods",
    "text": "Visualising the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_2.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4 - Visualising Uncertainty",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.\nLearning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\npackage 'FunnelPlotR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\idrin\\AppData\\Local\\Temp\\RtmpeAwTUc\\downloaded_packages"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#importing-the-data",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#importing-the-data",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Importing the Data",
    "text": "Importing the Data\nThe COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal.\nFor this hands-on exercise, compares the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: The basic plot",
    "text": "FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = `Positive`,\n  denominator = `Death`,\n  group = `Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-makeover-1",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: Makeover 1",
    "text": "FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nx_range and y_range are used to set the range of x-axis and y-axis\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = `Death`,\n  denominator = `Positive`,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-makeover-2",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: Makeover 2",
    "text": "FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = `Death`,\n  denominator = `Positive`,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)    \n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#computing-the-basic-derived-fields",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Computing the basic derived fields",
    "text": "Computing the basic derived fields\nFirst, derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#plotting-a-static-funnel-plot",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Plotting a static funnel plot",
    "text": "Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands_on_exercise/Hands_on_ex4/Hands-on_Ex04_3.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4 - Funnel Plots for Fair Comparisons",
    "section": "Interactive Funnel Plot: plotly + ggplot2",
    "text": "Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\ntidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\nwidyr,\nwordcloud and ggwordcloud,\ntextplot (required igraph, tidygraph and ggraph, )\nDT,\nlubridate and hms.\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,tidyverse, tidygraph, ggraph, igraph)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Importing Multiple Text Files from Multiple Folders",
    "text": "Importing Multiple Text Files from Multiple Folders\n\nCreating a folder list\n\nnews20 &lt;- \"data/news20/\"\n\n\n\nDefine a function to read all files from a folder into a data frame\n\nread_folder &lt;- function(infolder) {\n  tibble(file = dir(infolder, \n                    full.names = TRUE)) %&gt;%\n    mutate(text = map(file, \n                      read_lines)) %&gt;%\n    transmute(id = basename(file), \n              text) %&gt;%\n    unnest(text)\n}"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Importing Multiple Text Files from Multiple Folders",
    "text": "Importing Multiple Text Files from Multiple Folders\n\nReading in all the messages from the 20news folder\n\nread_lines() of readr package is used to read up to n_max lines from a file.\nmap() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\nunnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.\nmutate() of dplyr is used to add new variables and preserves existing ones;\ntransmute() of dplyr is used to add new variables and drops existing ones.\nread_rds() is used to save the extracted and combined data frame as rds file for future use.\n\n\nraw_text &lt;- tibble(folder = \n                     dir(news20, \n                         full.names = TRUE)) %&gt;%\n  mutate(folder_out = map(folder, \n                          read_folder)) %&gt;%\n  unnest(cols = c(folder_out)) %&gt;%\n  transmute(newsgroup = basename(folder), \n            id, text)\nwrite_rds(raw_text, \"data/rds/news20.rds\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#initial-eda",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#initial-eda",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Initial EDA",
    "text": "Initial EDA\nFigure below shows the frequency of messages by newsgroup.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nraw_text &lt;- read_rds(\"data/rds/news20.rds\")\nraw_text %&gt;%\n  group_by(newsgroup) %&gt;%\n  summarize(messages = n_distinct(id)) %&gt;%\n  ggplot(aes(messages, newsgroup)) +\n  geom_col(fill = \"lightblue\") +\n  labs(y = NULL)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#introducing-tidytext",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#introducing-tidytext",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Introducing tidytext",
    "text": "Introducing tidytext\n\nUsing tidy data principles in processing, analysing and visualising text data.\nMuch of the infrastructure needed for text mining with tidy data frames already exists in packages like ‘dplyr’, ‘broom’, ‘tidyr’, and ‘ggplot2’.\n\n\nRemoving header and automated email signitures\nEach message contains certain structural elements and additional text that are undesirable for inclusion in the analysis. For example:\n\nHeader containing fields such as “from:” or “in_reply_to:”\nAutomated email signatures, which occur after a line like “–”.\n\nThe code chunk below uses:\n\ncumsum() of base R to return a vector whose elements are the cumulative sums of the elements of the argument.\nstr_detect() from stringr to detect the presence or absence of a pattern in a string.\n\n\ncleaned_text &lt;- raw_text %&gt;%\n  group_by(newsgroup, id) %&gt;%\n  filter(cumsum(text == \"\") &gt; 0,\n         cumsum(str_detect(\n           text, \"^--\")) == 0) %&gt;%\n  ungroup()\n\n\n\nRemoving lines with nested text representing quotes from other users\nRegular expressions are used to remove with nested text representing quotes from other users.\n\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\nfilter() of dplyr package is used to subset a data frame, retaining all rows that satisfy the specified conditions.\n\n\ncleaned_text &lt;- cleaned_text %&gt;%\n  filter(str_detect(text, \"^[^&gt;]+[A-Za-z\\\\d]\")\n         | text == \"\",\n         !str_detect(text, \n                     \"writes(:|\\\\.\\\\.\\\\.)$\"),\n         !str_detect(text, \n                     \"^In article &lt;\")\n  )\n\n\n\nText Data Processing\n\n unnest_tokens() of tidytext package is used to split the dataset into tokens\n stop_words() is used to remove stop-words\n\n\nusenet_words &lt;- cleaned_text %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\nHeaders, signatures and formatting have been removed. The code chunk below calculates individual word frequncies to explore common words in the dataset.\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\n# A tibble: 5,542 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 people        57\n 2 time          50\n 3 jesus         47\n 4 god           44\n 5 message       40\n 6 br            27\n 7 bible         23\n 8 drive         23\n 9 homosexual    23\n10 read          22\n# ℹ 5,532 more rows\n\n\nWord frequencies within newsgroup\n\nwords_by_newsgroup &lt;- usenet_words %&gt;%\n  count(newsgroup, word, sort = TRUE) %&gt;%\n  ungroup()\n\n\n\nVisualising Words in newsgroups\n\nwordcloud() of wordcloud package is used to plot a static wordcloud\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwordcloud(words_by_newsgroup$word,\n          words_by_newsgroup$n,\n          max.words = 300)\n\n\n\n\nA DT table can be used to complement the visual discovery.\n\nTableCode\n\n\n\n\n\n\n\n\n\n\n\n# Create a data frame with word frequency data\nword_freq_table &lt;- data.frame(Word = words_by_newsgroup$word,\n                              Frequency = words_by_newsgroup$n)\n\n# Render the DataTable\ndatatable(word_freq_table, \n          options = list(pageLength = 10))\n\n\n\n\n\n\nVisualising Words in newsgroups\n ggwordcloud package is used to plot the wordcloud below\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(123)\n\nwords_by_newsgroup %&gt;%\n  filter(n &gt; 0) %&gt;%\nggplot(aes(label = word,\n           size = n)) +\n  geom_text_wordcloud() +\n  theme_minimal() +\n  facet_wrap(~newsgroup)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "href": "Hands_on_exercise/Hands_on_ex5/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "title": "Hands-on Exercise 5 - Visualising and Analysing Text Data",
    "section": "Basic Concept of TF-IDF",
    "text": "Basic Concept of TF-IDF\ntf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.\n\\(idf(term) = ln \\frac{n_{documents}}{n_{documents containing term}}\\)\n\nComputing tf-idf within newsgroups\nbind_tf_idf() of tidytext is used to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\n\ntf_idf &lt;- words_by_newsgroup %&gt;%\n  bind_tf_idf(word, newsgroup, n) %&gt;%\n  arrange(desc(tf_idf))\n\n\n\nVisualising tf-idf as interactive table\nInteractive table created by using datatable() to create a html table that allows pagination of rows and columns.\nThe code chunk below also uses:\n\nfilter() argument is used to turn control the filter UI.\nformatRound() is used to customise the values format. The argument digits define the number of decimal places.\nformatStyle() is used to customise the output table. In this example, the arguments target and lineHeight are used to reduce the line height by 25%.\n\n\nTableCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(tf_idf, filter = 'top') %&gt;% \n  formatRound(columns = c('tf', 'idf', \n                          'tf_idf'), \n              digits = 3) %&gt;%\n  formatStyle(0, \n              target = 'row', \n              lineHeight='25%')\n\n\n\n\n\n\nVisualising tf-idf within newsgroups\nFacet bar charts technique is used to visualise the tf-idf values of science related newsgroup.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntf_idf %&gt;%\n  filter(str_detect(newsgroup, \"^sci\\\\.\")) %&gt;%\n  group_by(newsgroup) %&gt;%\n  slice_max(tf_idf, \n            n = 12) %&gt;%\n  ungroup() %&gt;%\n  mutate(word = reorder(word, \n                        tf_idf)) %&gt;%\n  ggplot(aes(tf_idf, \n             word, \n             fill = newsgroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ newsgroup, \n             scales = \"free\") +\n  labs(x = \"tf-idf\", \n       y = NULL)\n\n\n\n\n\n\nCounting and correlating pairs of words with the widyr package\n\nTo count the number of times that two words appear within the same document, or to see how correlated they are.\nMost operations for finding pairwise counts or correlations need to turn the data into a wide matrix first.\nwidyr package first ‘casts’ a tidy dataset into a wide matrix, performs an operation such as a correlation on it, then re-tidies the result.\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\n\nVisualising correlation as a network\nRelationship between newgroups is visualised as a network graph\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(2017)\n\nnewsgroup_cors %&gt;%\n  filter(correlation &gt; .025) %&gt;%\n  graph_from_data_frame() %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = correlation, \n                     width = correlation)) +\n  geom_node_point(size = 6, \n                  color = \"lightblue\") +\n  geom_node_text(aes(label = name),\n                 color = \"red\",\n                 repel = TRUE) +\n  theme_void()\n\n\n\n\n\n\nBigram\nCreated by using unnest_tokens() of tidytext.\n\nBigramCode\n\n\n\n\n# A tibble: 28,827 × 3\n   newsgroup   id    bigram    \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;     \n 1 alt.atheism 54256 &lt;NA&gt;      \n 2 alt.atheism 54256 &lt;NA&gt;      \n 3 alt.atheism 54256 as i      \n 4 alt.atheism 54256 i don't   \n 5 alt.atheism 54256 don't know\n 6 alt.atheism 54256 know this \n 7 alt.atheism 54256 this book \n 8 alt.atheism 54256 book i    \n 9 alt.atheism 54256 i will    \n10 alt.atheism 54256 will use  \n# ℹ 28,817 more rows\n\n\n\n\n\nbigrams &lt;- cleaned_text %&gt;%\n  unnest_tokens(bigram, \n                text, \n                token = \"ngrams\", \n                n = 2)\n\nbigrams\n\n\n\n\n\n\nCounting bigrams\nCount and sort the bigram data frame ascendingly\n\nBigram CountCode\n\n\n\n\n# A tibble: 19,888 × 2\n   bigram       n\n   &lt;chr&gt;    &lt;int&gt;\n 1 of the     169\n 2 in the     113\n 3 to the      74\n 4 to be       59\n 5 for the     52\n 6 i have      48\n 7 that the    47\n 8 if you      40\n 9 on the      39\n10 it is       38\n# ℹ 19,878 more rows\n\n\n\n\n\nbigrams_count &lt;- bigrams %&gt;%\n  filter(bigram != 'NA') %&gt;%\n  count(bigram, sort = TRUE)\n\nbigrams_count\n\n\n\n\n\n\nCleaning bigram\nSeperate the bigram into two words\n\nBigramCode\n\n\n\n\n# A tibble: 4,607 × 4\n   newsgroup   id    word1        word2        \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;        \n 1 alt.atheism 54256 defines      god          \n 2 alt.atheism 54256 term         preclues     \n 3 alt.atheism 54256 science      ideas        \n 4 alt.atheism 54256 ideas        drawn        \n 5 alt.atheism 54256 supernatural precludes    \n 6 alt.atheism 54256 scientific   assertions   \n 7 alt.atheism 54256 religious    dogma        \n 8 alt.atheism 54256 religion     involves     \n 9 alt.atheism 54256 involves     circumventing\n10 alt.atheism 54256 gain         absolute     \n# ℹ 4,597 more rows\n\n\n\n\n\nbigrams_separated &lt;- bigrams %&gt;%\n  filter(bigram != 'NA') %&gt;%\n  separate(bigram, c(\"word1\", \"word2\"), \n           sep = \" \")\n\nbigrams_filtered &lt;- bigrams_separated %&gt;%\n  filter(!word1 %in% stop_words$word) %&gt;%\n  filter(!word2 %in% stop_words$word)\n\n\n\n\n\n\nCounting the bigram again\n\nbigram_counts &lt;- bigrams_filtered %&gt;% \n  count(word1, word2, sort = TRUE)\n\n\n\nCreate a network graph from bigram data frame\nA network graph is created by using graph_from_data_frame() of igraph package.\n\nbigram_graph &lt;- bigram_counts %&gt;%\n  filter(n &gt; 3) %&gt;%\n  graph_from_data_frame()\nbigram_graph\n\nIGRAPH fb49dd5 DN-- 40 24 -- \n+ attr: name (v/c), n (e/n)\n+ edges from fb49dd5 (vertex names):\n [1] 1          -&gt;2           1          -&gt;3           static     -&gt;void       \n [4] time       -&gt;pad         1          -&gt;4           infield    -&gt;fly        \n [7] mat        -&gt;28          vv         -&gt;vv          1          -&gt;5          \n[10] cock       -&gt;crow        noticeshell-&gt;widget      27         -&gt;1993       \n[13] 3          -&gt;4           child      -&gt;molestation cock       -&gt;crew       \n[16] gun        -&gt;violence    heat       -&gt;sink        homosexual -&gt;male       \n[19] homosexual -&gt;women       include    -&gt;xol         mary       -&gt;magdalene  \n[22] read       -&gt;write       rev        -&gt;20          tt         -&gt;ee         \n\n\n\n\nVisualizing a network of bigrams with ggraph\nggraph package is used to plot the bigram\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\nggraph(bigram_graph, layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() +\n  geom_node_text(aes(label = name), \n                 vjust = 1, \n                 hjust = 1)\n\n\n\n\n\n\nRevised version\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\na &lt;- grid::arrow(type = \"closed\", \n                 length = unit(.15,\n                               \"inches\"))\n\nggraph(bigram_graph, \n       layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = n), \n                 show.legend = FALSE,\n                 arrow = a, \n                 end_cap = circle(.07,\n                                  'inches')) +\n  geom_node_point(color = \"lightblue\", \n                  size = 5) +\n  geom_node_text(aes(label = name), \n                 vjust = 1, \n                 hjust = 1) +\n  theme_void()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nigraph\ntidygraph\nggraph\nvisNetwork\ntidyverse\nlubridate\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#the-data",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "The Data",
    "text": "The Data\nThe data sets used are from an oil exploration and extraction company. There are two data sets:\n\nNodes data: GAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nedges (aka link) data: GAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\nImporting network data from files\nImport GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\nReviewing the imported data\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\nWrangling time\nThe output report of GAStech_edges below reveals that the SentDate is treated as “Character” data type instead of date data type, which is incorrect. Thus, the data type of SentDate field needs to be changed to “Date”” data type.\nNote:\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\nReviewing the revised date fields\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\nWrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records, which is not very useful for visualisation.\nThus, aggregation is done for the individual by date, senders, receivers, main subject and day of the week.\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\nReviewing the revised edges file\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating network objects using tidygraph",
    "text": "Creating network objects using tidygraph\n tidygraph package provides a tidy API for graph/network manipulation. Network data can be envisioned as 2 tidy tables, 1 for node data and 1 for edge data.\ntidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. It is also provides access to many graph algorithms with return values that facilitate their use in a tidy workflow.\n\nThe tbl_graph object\ntidygraph can be used to create network objects:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\nThe dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n.N() function is used to gain access to the node data while manipulating the edge data. E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\nUsing tbl_graph() to build tidygraph data model.\nuse tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\nReviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\nReviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\nChanging the active object\nThe nodes tibble data frame is activated by default, but it can be changed with the activate() function. To rearrange the rows in the edges tibble to list those with the highest “weight” first, use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Plotting Static Network Graphs with ggraph package",
    "text": "Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nThere are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts\n\n\nPlotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. \n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired.\nBoth of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\nChanging the default network graph theme\nUse theme_graph() to remove the x and y axes.\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nChanging the coloring of the plot\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\nWorking with ggraph’s layouts\nggraph supports many standard layouts: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\nFruchterman and Reingold layout\nPlot the network graph using Fruchterman and Reingold layout.\n\nlayout argument is used to define the layout to be used.\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nModifying network nodes\ncolour each node by referring to their respective departments\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes.\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nModifying edges\nThe thickness of the edges will be mapped with the Weight variable.\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#creating-facet-graphs",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#creating-facet-graphs",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating facet graphs",
    "text": "Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\nWorking with facet_edges()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_edges()\nuses theme() to change the position of the legend\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nA framed facet graph\nAdd frame to each graph\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\nWorking with facet_nodes()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#network-metrics-analysis",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#network-metrics-analysis",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Network Metrics Analysis",
    "text": "Network Metrics Analysis\n\nComputing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here.\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nVisualising network metrics\nFrom ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nVisualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal).\ngroup_edge_betweenness() is used below\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands_on_exercise/Hands_on_ex6/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise 6 - Modelling, Visualising and Analysing Network Data with R",
    "section": "Building Interactive Network Graph with visNetwork",
    "text": "Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nResulting graph:\n\nThe nodes can be moved and the graph will use an algorithm to keep the nodes properly spaced.\nThe plot can be moved around to be re-centered, zoomed in and out.\n\n\n\nData preparation\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\nPlotting the first interactive network graph\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\nWorking with layout\nFruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\nWorking with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nrename Department field to group\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nvisNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nWorking with visual attributes - Edges\nvisEdges() is used to symbolise the edges.\n\nThe argument arrows is used to define where to place the arrow.\nThe smooth argument is used to plot the edges using a smooth curve.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nInteractivity\nvisOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "",
    "text": "Learning Objectives:"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nscales\nviridis\nggthemes\ngridExtra\nreadxl\nknitr\ndata.table\ntidyverse\nlubridate\nCGPfunctions\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\npacman::p_load(scales, viridis, ggthemes, gridExtra, readxl, knitr, data.table, tidyverse, lubridate, CGPfunctions)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nImport eventlog.csv into RStudio environment by using read_csv() of readr package.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nattacks contains three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hours of day fields\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nmutate() of dplyr package is used to:\n\nextract necessary data into attacks dataframe\nconvert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\n\nView dataframe\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngrouped tibble dataframe is derived by aggregating the attacks by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nNext, group the count by hour and wkday, then plot it."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#building-multiple-calendar-heatmaps",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "Building Multiple Calendar Heatmaps",
    "text": "Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, the following steps need to be done:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nExtract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-cycle-plot",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\nPlot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\nStep 1: Data Import\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\nStep 3: Extracting the target country\nThe code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nStep 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nStep 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-slopegraph",
    "href": "Hands_on_exercise/Hands_on_ex7/Hands-on_Ex07.html#plotting-slopegraph",
    "title": "Hands-on Exercise 7 - Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\nCGPfunctions will be used. Refer to Using newggslopegraph to learn more about the function. Read more about newggslopegraph() and its arguments by referring to its documentation.\n\nStep 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\nStep 2: Plotting the slopegraph\nThe code chunk below will be used to plot a basic slopegraph.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  }
]