[
  {
    "objectID": "takehome/takehome2.html",
    "href": "takehome/takehome2.html",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "",
    "text": "In this section, we will review a classmate’s output for Take-home Exercise 1, discuss potential improvements, and explore how to create a new visualization in R.\n\n\n\n“Scatter Plot of Transacted Price vs. Area”"
  },
  {
    "objectID": "takehome/takehome2.html#step-1-load-library-and-data",
    "href": "takehome/takehome2.html#step-1-load-library-and-data",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 1: Load library and data",
    "text": "Step 1: Load library and data\n\n\nCode\n# Load library for data manipulation\n\npacman::p_load(ggplot2,plotly,dplyr,tidyverse,ggrepel)\n\n# Load in Data\n\nsetwd(\"C:/kekekay/ISSS608-VAA/takehome/data\")\nfull_data &lt;-  list.files(\n                    pattern = \"*.csv\",\n                    full.names=T) %&gt;%\n                    lapply(read_csv) %&gt;%\n                    bind_rows()"
  },
  {
    "objectID": "takehome/takehome2.html#step-2-aggregate-data-count-transactions-per-property-type",
    "href": "takehome/takehome2.html#step-2-aggregate-data-count-transactions-per-property-type",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 2: Aggregate Data: Count transactions per property type",
    "text": "Step 2: Aggregate Data: Count transactions per property type\n\n\nCode\ntransaction_counts &lt;- full_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')  \n\n# percentages for labels\ntransaction_counts &lt;- transaction_counts %&gt;%\n  mutate(Percentage = Transactions / sum(Transactions) * 100)"
  },
  {
    "objectID": "takehome/takehome2.html#step-3-use-ggplot2-to-create-a-pie-chart-representing-the-number-of-transactions-for-each-property-type",
    "href": "takehome/takehome2.html#step-3-use-ggplot2-to-create-a-pie-chart-representing-the-number-of-transactions-for-each-property-type",
    "title": "Take-home Exercise 2:Singapore Private Residential Market",
    "section": "Step 3: Use ggplot2 to create a pie chart representing the number of transactions for each property type",
    "text": "Step 3: Use ggplot2 to create a pie chart representing the number of transactions for each property type\n\n\nCode\ncolors &lt;- c(\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\", \"#b3de69\")\n\nggplot(transaction_counts, aes(x = \"\", y = Transactions, fill = `Property Type`)) +\n  geom_bar(stat = \"identity\", width = 4, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = colors) +\n  geom_label_repel(\n    aes(label = sprintf(\"%s (%.1f%%)\", `Property Type`, Percentage)),\n    nudge_x = 2 * cos(seq(0, 2 * pi, length.out = nrow(transaction_counts) + 1)[-nrow(transaction_counts) - 1]),  # Adjust for radial placement\n    nudge_y = 1 * sin(seq(0, 2 * pi, length.out = nrow(transaction_counts) + 1)[-nrow(transaction_counts) - 1]),  # Adjust for radial placement\n    arrow = arrow(length = unit(0.02, \"npc\"), type = \"closed\", ends = \"last\"),\n    size = 4,  # Adjust font size for readability\n    color = \"black\"\n  ) +\n  labs(title = \"No. of Transactions by Property Type\") +\n  theme_void() +\n  theme(legend.position = \"none\")  \n\n\n\n\n\nSince condominiums and apartments account for the highest number of transactions, we will conduct a detailed market analysis of their unit prices per square foot.\n\nCondominiumApartment\n\n\n\n\nCode\n# Filter data for only Condominiums\ncondo_data &lt;- full_data %&gt;%\n  filter(`Property Type` == \"Condominium\")\n\n# Sampling data\nsampled_data &lt;- condo_data[sample(nrow(condo_data), 500), ]\nsampled_data$`Transacted Price ($)` &lt;- sampled_data$`Transacted Price ($)` / 1000\n\n# Calculate Price per Sq ft\nsampled_data$`Price per Sq ft` &lt;- sampled_data$`Transacted Price ($)` / sampled_data$`Area (SQFT)`\n\n# Create the ggplot\nP3 &lt;- ggplot(data = sampled_data, aes(x = `Area (SQFT)`, y = `Transacted Price ($)`, size = `Price per Sq ft`, color = `Type of Sale`, \n                                      text = paste(\"Price: \", `Transacted Price ($)`, \"k&lt;br&gt;Area: \", `Area (SQFT)`, \n                                                   \"sqft&lt;br&gt;Type of Sale: \", `Type of Sale`, \n                                                   \"&lt;br&gt;Price per Sq ft: $\", round(`Price per Sq ft`, 2), \"/sqft\"))) +\n  geom_point(alpha = 0.3) +  # Increased transparency\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_size_area(max_size = 5) +  # Area scaled size for proportional visibility\n  scale_x_continuous(limits = c(200, 4000), breaks = seq(400, 4000, by = 200)) +\n  scale_y_continuous(limits = c(0, 10000)) +\n  labs(x = \"Condominium Size (sq ft)\", y = \"Sale Price (in $000)\",\n       title = \"Market Analysis: Unit Price(Sqft) for Condominiums\") +\n  guides(size = guide_legend(title = \"Price per Sq ft\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        panel.grid.major = element_line(color = \"gray\", size = 0.5),\n        panel.grid.minor = element_line(color = \"lightgray\", size = 0.25),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to interactive plot\nP3_interactive &lt;- ggplotly(P3, tooltip = \"text\")\n\n# Print the interactive plot\nP3_interactive\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter data for only apartments\nap_data &lt;- full_data %&gt;% \n  filter(`Property Type` == \"Apartment\")\n\n# Sampling data\nsampled_data1 &lt;- ap_data[sample(nrow(ap_data), 500), ]\nsampled_data1$`Transacted Price ($)` &lt;- sampled_data1$`Transacted Price ($)` / 1000\n\n# Calculate Price per Sq ft\nsampled_data1$`Price per Sq ft` &lt;- sampled_data1$`Transacted Price ($)` / sampled_data1$`Area (SQFT)`\n\n# Create the ggplot\np2 &lt;- ggplot(data = sampled_data1, aes(x = `Area (SQFT)`, y = `Transacted Price ($)`, size = `Price per Sq ft`, color = `Type of Sale`, \n                                      text = paste(\"Price: \", `Transacted Price ($)`, \"k&lt;br&gt;Area: \", `Area (SQFT)`, \n                                                   \"sqft&lt;br&gt;Type of Sale: \", `Type of Sale`, \n                                                   \"&lt;br&gt;Price per Sq ft: $\", round(`Price per Sq ft`, 2), \"/sqft\"))) +\n  geom_point(alpha = 0.3) +  # Increased transparency\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_size_area(max_size = 5) +  # Area scaled size for proportional visibility\n  scale_x_continuous(limits = c(200, 4000), breaks = seq(400, 4000, by = 200)) +\n  scale_y_continuous(limits = c(0, 10000)) +\n  labs(x = \"Apartment Size (sq ft)\", y = \"Sale Price (in $000)\",\n       title = \"Market Analysis: Unit Price(Sqft) for Apartment\") +\n  guides(size = guide_legend(title = \"Price per Sq ft\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\",\n        panel.grid.major = element_line(color = \"gray\", size = 0.5),\n        panel.grid.minor = element_line(color = \"lightgray\", size = 0.25),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to interactive plot\np2_interactive &lt;- ggplotly(p2, tooltip = \"text\")\n\n# Print the interactive plot\np2_interactive\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips of Interactive Features:\n\n\n\n\nUse the “Autoscale” button to automatically adjust the plot scale to fit within the view. This ensures all data is visible after zooming in or out.\nClick on legend entries to toggle the visibility of data points for each type of sale.\nHover over any data point to see detailed information, such as the price, area, type of sale, and price per square foot. This provides immediate insights without additional data references.\nThe size of each point indicates the price per square foot; larger points denote higher prices, allowing for quick visual assessment of property values.\nMove your cursor along the x-axis to compare data points from different types of sales at the same condominium size. This hover comparison helps identify trends and outliers within specific size ranges."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "inclass/inclass01/inclass01.html",
    "href": "inclass/inclass01/inclass01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n#prior setting of folders is important \n#if use read.csv then outcome wont be a tibl format, all the column names are changed"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html",
    "title": "Hands-on ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse pakcges are installed in the computer. If yes, then they will be launched into R environment.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\ngetwd()\n\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex1\"\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n\n\n\nCode\nggplot(data = exam_data,\n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#install-and-launching-r-packages",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#install-and-launching-r-packages",
    "title": "Hands-on ex1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse pakcges are installed in the computer. If yes, then they will be launched into R environment.\n\n\nCode\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#checking-working-directory-and-importing-data",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#checking-working-directory-and-importing-data",
    "title": "Hands-on ex1",
    "section": "",
    "text": "Code\ngetwd()\n\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex1\"\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"Exam_data.csv\")\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#plotting-a-simple-bar-chart",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#plotting-a-simple-bar-chart",
    "title": "Hands-on ex1",
    "section": "",
    "text": "Code\nggplot(data = exam_data,\n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#comparison-of-base-r-and-ggplot-plot",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#comparison-of-base-r-and-ggplot-plot",
    "title": "Hands-on ex1",
    "section": "2.1 Comparison of Base R and ggplot plot",
    "text": "2.1 Comparison of Base R and ggplot plot\n\n\nCode\nlibrary(ggplot2)\n\n#R graphic \nhist(exam_data$MATHS)\n\n#ggplot\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\n\nWhile both approaches achieve similar results, the ggplot2 version can be easily modified and extended with additional layers, themes, and scales without fundamentally altering the underlying code structure. more suitable for complex visualization."
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#call-the-ggplot-function",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#call-the-ggplot-function",
    "title": "Hands-on ex1",
    "section": "3.1 call the ggplot() function",
    "text": "3.1 call the ggplot() function\n\n\nCode\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#adding-in-x-axis-and-the-axiss-label",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#adding-in-x-axis-and-the-axiss-label",
    "title": "Hands-on ex1",
    "section": "3.2 adding in x-axis and the axis’s label",
    "text": "3.2 adding in x-axis and the axis’s label\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on ex1",
    "section": "3.3 Essential Grammatical Elements in ggplot2: geom",
    "text": "3.3 Essential Grammatical Elements in ggplot2: geom\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom_bar VS geom_dotplot vs geom_histogram()\" \n\n#| fig-subcap: \n#| - \"plots a bar chart by using geom_bar()\" \n\n#| - \"geom_dotplot() of ggplot2 is used to plot a dot plot\" \n#| - \"turn off the y-axis &  change the binwidth to 2.5\"\n#| - \"create a simple histogram\"\n#| layout-ncol: 4 \n#| column: page\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\n\n\n\nFigure 2: ?(caption)\n\n\n\n\n\n\n\nFigure 3: ?(caption)\n\n\n\n\n\n\n\nFigure 4: ?(caption)\n\n\n\n\n\n\nCode\n#| fig-cap: \"Modifying a Geometric Object \" \n\n#| fig-subcap: \n#| - \"by changing geom()\" \n\n#| - \"by changing aes()\" \n\n#| layout-ncol: 2\n#| column: page\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\nFigure 5: ?(caption)\n\n\n\n\n\n\n\nFigure 6: ?(caption)\n\n\n\n\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom-density() VS geom_boxplot()\" \n\n#| fig-subcap: \n#| - \"geom-density() computes and plots kernel density estimate\" \n\n#| - \"two kernel density lines by using colour or fill arguments of aes()\" \n#| - \"geom_boxplot() displays continuous value list\"\n#| - \"adding notch to help visually assess whether the medians of distributions differ\"\n#| layout-ncol: 4 \n#| column: page\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)    \n\n\n\n\n\nFigure 7: ?(caption)\n\n\n\n\n\n\n\nFigure 8: ?(caption)\n\n\n\n\n\n\n\nFigure 9: ?(caption)\n\n\n\n\n\n\n\nFigure 10: ?(caption)\n\n\n\n\n\n\nCode\n#| fig-cap: \"Geometric Objects: geom_violin VS geom_point()\" \n\n#| fig-subcap: \n#| - \"geom_violin is designed for creating violin plot to compare several distributions side by side\" \n\n#| - \"geom_point() is especially useful for creating scatterplot\" \n\n#| layout-ncol: 2\n#| column: page\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\nFigure 11: ?(caption)\n\n\n\n\n\n\n\nFigure 12: ?(caption)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#combine-geom-objects",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#combine-geom-objects",
    "title": "Hands-on ex1",
    "section": "3.4 Combine geom objects",
    "text": "3.4 Combine geom objects\nplot the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on ex1",
    "section": "3.5 Essential Grammatical Elements in ggplot2: stat",
    "text": "3.5 Essential Grammatical Elements in ggplot2: stat\n\n3.5.1 Working with stat()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n3.5.2 using stat_summary() function and overriding the default geom\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n3.5.3 using geom_() function and overriding the default stat\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=4)  \n\n\n\n\n\n\n\n3.5.4 adding a best fit curve on a scatterplot\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n3.5.5 override default smoothing method from loess to linear model\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on ex1",
    "section": "3.6 Essential Grammatical Elements in ggplot2: Facets",
    "text": "3.6 Essential Grammatical Elements in ggplot2: Facets\n\n3.6.1 Working with facet_wrap()\nThe facet_grid() function create a grid of plots by specifying rows and columns based on factors.\n\n\nCode\n# Assuming exam_data is already loaded and contains columns MATHS and CLASS\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(CLASS ~ .)  # CLASS variable defines the rows\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(. ~ CLASS)  # CLASS variable defines the columns\n\n\n\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on ex1",
    "section": "3.7 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "3.7 Essential Grammatical Elements in ggplot2: Coordinates\n\n3.7.1 Working with Coordinate\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n3.7.2 flips the horizontal bar chart into vertical bar chart by using coord_flip()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n3.7.3 Changing the y- and x-axis range\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n3.7.4 fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands_on_exercise/Hands_on_ex1/Hands_on_ex1.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on ex1",
    "section": "3.8 Essential Grammatical Elements in ggplot2: themes",
    "text": "3.8 Essential Grammatical Elements in ggplot2: themes\n\n3.8.1 Working with theme\n\n\nPlotData\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nCode\n# Plot with theme_gray()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nCode\n# Plot with theme_classic()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nCode\n# Plot with theme_minimal()\nggplot(data=exam_data, aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "before_class.html",
    "href": "before_class.html",
    "title": "ISSS608-VA",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytic and Applications.\nReference :\nQuarto – HTML Theming\nReports & Presentations with Quarto\nQuarto Basics\nR for Visual Analytics"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\ngetwd()\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex2\"\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\n\n\n\nPlotCode\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nPlotCode\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nLets try The Wall Street Journal.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 8,\n              base_size = 20,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nhow to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nprint(p1)\n\n\n\nprint(p2)\n\n\n\nprint(p3)\n\n\n\n\n\n\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nWith inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np\n\nA grob, ggplot, patchwork, formula, raster, or nativeRaster object to add as an inset\n\nleft, bottom, right, top\n\nnumerics or units giving the location of the outer bounds. If given as numerics they will be converted to npc units.\n\nalign_to\n\nSpecifies what left, bottom, etc should be relative to. Either 'panel' (default), 'plot', or 'full'.\n\non_top\n\nLogical. Should the inset be placed on top of the other plot or below (but above the background)?\n\nclip\n\nLogical. Should clipping be performed on the inset?\n\nignore_tag\n\nLogical. Should autotagging ignore the inset?\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj()"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#installing-and-loading-the-required-libraries",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#importing-data",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "getwd()\n\n[1] \"C:/kekekay/ISSS608-VAA/Hands_on_exercise/Hands_on_ex2\"\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "PlotCode\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-themes",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "PlotCode\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nLets try The Wall Street Journal.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 8,\n              base_size = 20,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-single-graph",
    "href": "Hands_on_exercise/Hands_on_ex2/Hands_on_ex2.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nprint(p1)\n\n\n\nprint(p2)\n\n\n\nprint(p3)\n\n\n\n\n\n\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nWith inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np\n\nA grob, ggplot, patchwork, formula, raster, or nativeRaster object to add as an inset\n\nleft, bottom, right, top\n\nnumerics or units giving the location of the outer bounds. If given as numerics they will be converted to npc units.\n\nalign_to\n\nSpecifies what left, bottom, etc should be relative to. Either 'panel' (default), 'plot', or 'full'.\n\non_top\n\nLogical. Should the inset be placed on top of the other plot or below (but above the background)?\n\nclip\n\nLogical. Should clipping be performed on the inset?\n\nignore_tag\n\nLogical. Should autotagging ignore the inset?\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj()"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html",
    "href": "inclass/inclass02/inclass02.html",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "",
    "text": "Statistical graphic methods for visualising distribution using ggplot2 and its extensions for:\n\nRidgeline plot\nRaincloud plot"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#loading-r-packages",
    "href": "inclass/inclass02/inclass02.html#loading-r-packages",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Loading R packages",
    "text": "Loading R packages\nNote: Ensure that the pacman package has already been installed.\nThe code chunk below uses p_load() of pacman package to load the tidyverse family of packages.\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#importing-the-data",
    "href": "inclass/inclass02/inclass02.html#importing-the-data",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports Exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_df &lt;- read_csv(\"data/Exam_data.csv\")\n\nexam_data contains:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#varying-fill-colours-along-the-x-axis",
    "href": "inclass/inclass02/inclass02.html#varying-fill-colours-along-the-x-axis",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Varying Fill Colours along the X-axis",
    "text": "Varying Fill Colours along the X-axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis.\nTo achieve varying fill colours:\n\ngeom_ridgeline_gradient()\ngeom_density_ridges_gradient()\n\nHowever, they do not allow for alpha transparency.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [°C]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#mapping-probabilities-directly-onto-colour",
    "href": "inclass/inclass02/inclass02.html#mapping-probabilities-directly-onto-colour",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Mapping Probabilities directly onto colour",
    "text": "Mapping Probabilities directly onto colour\nStat function called stat_density_ridges() replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nInclude the argument calc_ecdf = TRUE in stat_density_ridges()!\n\n\n\nRidgeline Plots with Quantile Lines\nRidgeline plots can be coloured by quantile using geom_density_ridges_gradient(), via the calculated stat(quantile) \n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nQuantiles can also be specified by cut points e.g. 2.5% and 97.5% tails to colour the ridgeline plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#plotting-a-half-eye-graph",
    "href": "inclass/inclass02/inclass02.html#plotting-a-half-eye-graph",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\nPlot a Half-Eye graph by using stat_halfeye() of ggdist package, producing a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRemove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#adding-the-boxplot",
    "href": "inclass/inclass02/inclass02.html#adding-the-boxplot",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Adding the boxplot",
    "text": "Adding the boxplot\nThe second geometry layer i.e. a narrow boxplot is produced using geom_boxplot() of ggplot2 This produces a narrow boxplot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#adding-the-dot-plots",
    "href": "inclass/inclass02/inclass02.html#adding-the-dot-plots",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Adding the Dot Plots",
    "text": "Adding the Dot Plots\nThe third geometry layer is added using stat_dots() of ggdist package. This produces a half-dotplot, similar to a histogram that indicates the number of samples (number of dots) in each bin. Use side = “left” to specify the dot plots on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "inclass/inclass02/inclass02.html#finishing-touch",
    "href": "inclass/inclass02/inclass02.html#finishing-touch",
    "title": "In-Class Exercise 2 - Visualising Distribution",
    "section": "Finishing touch",
    "text": "Finishing touch\n coord_flip() of ggplot2 package is used to flip the raincloud chart horizontally to give it the raincloud appearance. theme_economist() of ggthemes package is also used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "takehome/takehome1.html",
    "href": "takehome/takehome1.html",
    "title": "Take-home Exercise 1:Singapore Private Residential Market",
    "section": "",
    "text": "Task\nIn this Take Home Exercise, a few compelling and insightful data visualizations for the Singapore private residential market and its sub-markets for the first quarter of 2024 are created using Quarto.\n\n\n\n\nflowchart LR\n  A[Data Preparation] --&gt; B[Data Summary]\n  B --&gt; C{Data Cleaning}\n  C --&gt; D[Market Overview Visualization 1: Trend of Average Unit Prices by Planning Region]\n  C --&gt; E[Market Overview Visualization 2: Popularity by Type of Sale]\n\n\n\n\n\n\n\nData Preparation\nData Source: private residential property transaction data from 1st January 2023 to 31st March 2024\nLoaded necessary libraries and set the working directory to source transaction data. Aggregated CSV files, collating rows to form a complete dataset. Performed initial data summary, extracting transaction count, date range, unique property types, and regions. Cleaned data, replacing empty values with NAs and converting numeric fields for insightful analysis.\n\n\nCode\npacman::p_load(ggplot2,lubridate,ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\nsetwd(\"C:/kekekay/ISSS608-VAA/takehome/data\")\nfull_data &lt;-  list.files(\n                    pattern = \"*.csv\",\n                    full.names=T) %&gt;%\n                    lapply(read_csv) %&gt;%\n                    bind_rows()\n\n\n\n\nData Summary\n\n\nCode\n# data summary\ntotal_transactions &lt;- nrow(full_data)\ndate_range &lt;- range(full_data$`Sale Date`, na.rm = TRUE)\nproperty_types &lt;- unique(full_data$`Property Type`)\ntotal_property_types &lt;- length(property_types)\nregion&lt;- unique(full_data$`Planning Region`)\narea&lt;- unique(full_data$`Planning Area`)\n\n\nTotal Transactions:26806\nDate Range is from 01 Apr 2023 to 31 Oct 2023\nTotal Unique Property Types: 6\nList of Property Types: Condominium, Executive Condominium, Terrace House, Semi-Detached House, Apartment, Detached House\n\n\n\nFive regions and planning area boundaries of Singapore were used in this study. Data source: URA (2021).\n\n\nPlanning Region: Central Region, East Region, North Region, North East Region, West Region\nPlanning Area: Bukit Merah, Bedok, Yishun, Sengkang, Hougang, Bukit Timah, Marine Parade, Clementi, Woodlands, Serangoon, Tanglin, Tampines, Kallang, Rochor, Novena, Punggol, Sembawang, Downtown Core, Bishan, Jurong West, Pasir Ris, Queenstown, Bukit Panjang, Bukit Batok, Museum, Newton, Southern Islands, Toa Payoh, Choa Chu Kang, Geylang, River Valley, Orchard, Singapore River, Outram, Tengah, Ang Mo Kio, Jurong East, Mandai, Sungei Kadut, Changi, Paya Lebar\n\n\nData Cleaning\n\n\nCode\ncleaned_data &lt;- full_data %&gt;%\n  mutate(across(c(`Nett Price($)`, `Area (SQM)`, `Unit Price ($ PSM)`), ~replace(., . == \"\" | . == \"-\", NA))) %&gt;%\n  mutate(\n    `Transacted Price ($)` = as.numeric(gsub(\",\", \"\", `Transacted Price ($)`)),\n    `Area (SQFT)` = as.numeric(`Area (SQFT)`),\n    `Unit Price ($ PSF)` = as.numeric(gsub(\",\", \"\", `Unit Price ($ PSF)`)),\n    `Sale Date` = dmy(`Sale Date`),\n    `Area (SQM)` = as.numeric(`Area (SQM)`),\n    `Unit Price ($ PSM)` = as.numeric(gsub(\",\", \"\", `Unit Price ($ PSM)`)),\n    `Nett Price($)` = ifelse(is.na(`Nett Price($)`),\n                             `Area (SQM)` * `Unit Price ($ PSM)`,\n                             as.numeric(gsub(\",\", \"\", `Nett Price($)`)))\n  )\n\n\n\n\n\n\n\n\nCode Explanation\n\n\n\n\n\n\nUse of across: The across() function is applied to check and replace empty or placeholder values across specified columns. It replaces any empty strings or ‘-’ with NA.\nCleaning and Converting Data: After the placeholders are handled, the script then cleans up currency and area fields, removing commas and converting them to numeric where necessary.\nConditional Calculation for Nett Price($): After ensuring all data types are correct and placeholders are handled, it calculates Nett Price($) where needed.\n\n\n\n\n\n\nMarket Overview Visualization 1: Trend of Average Unit Prices by Planning Region\n\nCentral RegionEast RegionNorth East RegionNorth RegionWest Region\n\n\n\n\nCode\np1 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"Central Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"Central Region: Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  # adjust strip text size\n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  # adjust x-axis text size\n    axis.ticks.length = unit(-3, \"pt\"),  #aAdjust tick length\n    panel.spacing = unit(1, \"lines\")  # adjust spacing between facets\n  )\n\np1\n\n\n\n\n\nIn the Central Region, Q1 2024 presents a stable pricing pattern for apartments, condominiums, and terrace houses, mirroring trends from the previous year. Conversely, detached houses experienced a significant rise in prices, followed by a pronounced dip, particularly within the sub-sale segment, which has now narrowed down to only resale transactions. It shows there was flutuation under Executive condominiums from March to December 2023, culminating in a complete absence of new sales in the subsequent quarter. Meanwhile, semi-detached houses witnessed a singular decline in June 2023, after which prices entered a gradual and steady climb, indicating a stabilizing market as progress through 2024.\n\n\n\n\nCode\np2 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"East Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"East Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  \n    axis.ticks.length = unit(-3, \"pt\"),  \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np2\n\n\n\n\n\nIn East Region, Apartments, condominiums and terrace houses have shown relative price stability, with condominiums displaying a slight uprend. Detached houses have seen erratic price movements with a sharp rise followed by a decline in sub-sale prices. Executive condominiums display notable price swings throughout the year, overall, it still demonstrates an upward price trend. In contrast, semi-detached houses show a significant dip year-end but recover to a gentle upward trend.\n\n\n\n\nCode\np3 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"North East Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"North East Region: Trend of Average Unit Prices\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1),  \n    axis.ticks.length = unit(-3, \"pt\"), \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np3\n\n\n\n\n\nIn the North East region, the fluctuation in the prices of detached houses is quite pronounced. Additionally, there’s a notable upward trend in the prices of executive condominiums, especially within the new sales category.\n\n\n\n\nCode\np4 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"North Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"North Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1), \n    axis.ticks.length = unit(-3, \"pt\"),  \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np4\n\n\n\n\n\nIn the North Region, apart from condominiums, other property types display considerable instability. However, as of March 2024, apartments, executive condominiums, and terrace houses continue to exhibit an increasing price trend.\n\n\n\n\nCode\np5 &lt;- cleaned_data %&gt;%\n  filter(`Planning Region` == \"West Region\") %&gt;% \n  group_by(Month = floor_date(`Sale Date`, \"month\"), `Type of Sale`, `Property Type`) %&gt;%\n  summarize(Average_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Month, y = Average_Price, color = `Type of Sale`)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +\n  labs(\n    title = \"West Region:Trend of Average Unit Prices Over Time\",\n    x = \"Month\",\n    y = \"Average Unit Price ($ PSM)\"\n  ) +\n  facet_wrap(~ `Property Type`, scales = \"free_y\", strip.position = \"bottom\") +  \n  theme(\n    plot.title = element_text(size = rel(1.5)),\n    legend.position = \"top\",\n    legend.text = element_text(size = rel(0.8)),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    plot.margin = margin(10, 10, 10, 10),\n    strip.text = element_text(size = rel(0.8)),  \n    axis.text.x = element_text(size = rel(0.8), angle = 45, hjust = 1, vjust = 1), \n    axis.ticks.length = unit(-3, \"pt\"), \n    panel.spacing = unit(1, \"lines\")  \n  )\n\np5\n\n\n\n\n\nIn the West Region, December 2023 marked a notable uptick in the prices of new sale apartments, surging from approximately $19,000 PSM to $26,000 PSM, before settling back at $22,000 PSM. Conversely, detached and semi-detached houses demonstrated a downward pricing trend.\n\n\n\nIn summary, the Central Region commands the highest unit prices across the board, while the North Region is distinguished by the lowest. Typically, new sales achieve higher prices than sub-sales and resales. However, an exception is noted in the North East Region, where terrace houses experience the lowest prices in sub-sales. Furthermore, the North East and North Regions are both exhibiting an upward price trend as we progress through Q1 of 2024.\n\n\nMarket Overview Visualization 2: Popularity by Type of Sale\n\nPopularity Overview by Type of SaleNew SaleResaleSub Sale\n\n\n\n\nCode\n# number of transactions by type of sale\ntransactions_by_sale_type &lt;- cleaned_data %&gt;%\n  count(`Type of Sale`) %&gt;%\n  mutate(Percentage = n / sum(n) * 100, \n         Label = paste(`Type of Sale`, round(Percentage, 1), \"%\"))  # set label for each slice\n\n# Custom colors for the pie slices\nslice_colors &lt;- c(\"New Sale\" = \"darkseagreen\", \"Resale\" = \"lavender\", \"Sub Sale\" = \"pink\")\n\n# Create the pie chart\npie_chart &lt;- ggplot(transactions_by_sale_type, aes(x = \"\", y = Percentage, fill = `Type of Sale`)) +\n  geom_col(width = 1) +  # this is to create a bar for each slice with a width that ensures no gaps\n  coord_polar(theta = \"y\") + \n  scale_fill_manual(values = slice_colors) +  \n  geom_text(aes(label = Label), position = position_stack(vjust = 0.5)) +  # add labels of each slice\n  labs(\n    title = \"Popularity Overview by Type of Sale\",\n    x = NULL,\n    y = NULL,\n    fill = \"Type of Sale\"\n  ) +\n  theme_void() +  \n  theme(\n    legend.position = \"bottom\",  # legend postion\n    plot.title = element_text(hjust = 0.5)  # plot title position\n  )\n\npie_chart\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'New Sale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0))  \n\n# heatmap for 'New Sale'\nheatmap_new_sale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) +  \n  scale_fill_gradient(low = \"white\", high = \"darkseagreen\", name = \"Transactions\") + \n  labs(\n    title = \"Popularity of New Sale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better readability\n    legend.position = \"right\"  # legend position\n  )\n\nheatmap_new_sale\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'Resale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"Resale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0))  \n\n# Create the heatmap for 'Resale'\nheatmap_Resale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) +  \n  scale_fill_gradient(low = \"white\", high = \"lavender\", name = \"Transactions\") +  \n  labs(\n    title = \"Popularity of Resale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    legend.position = \"right\"  \n  )\n\nheatmap_Resale\n\n\n\n\n\n\n\n\n\nCode\n# Filter for 'Sub Sale' transactions\nnew_sale_transactions &lt;- cleaned_data %&gt;%\n  filter(`Type of Sale` == \"Sub Sale\") %&gt;%\n  count(`Property Type`, `Planning Region`) %&gt;%\n  complete(`Property Type`, `Planning Region`, fill = list(n = 0)) \n\n# Create the heatmap for 'Sub Sale'\nheatmap_Sub_Sale &lt;- ggplot(new_sale_transactions, aes(x = `Planning Region`, y = `Property Type`, fill = n)) +\n  geom_tile(color = \"white\") +  \n  geom_text(aes(label = n), color = \"black\", size = 3, vjust = 1) + \n  scale_fill_gradient(low = \"white\", high = \"pink\", name = \"Transactions\") +  \n  labs(\n    title = \"Popularity of Sub-sale Flats by Planning Region\",\n    x = \"Planning Region\",\n    y = \"Type of Property\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),  \n    legend.position = \"right\"  \n  )\n\nheatmap_Sub_Sale\n\n\n\n\n\n\n\n\nMoving forward, we will explore transaction volumes to gauge popularity. Resale properties dominate the market, accounting for 62% of transactions, followed by new sales at 32.2% and sub-sales at 5.8%. Under both resale and new sale categories, condominiums and apartments in the Central Region are the most favored, while the North Region remains the least preferred. Interestingly, resale transactions show a preference for condominiums, whereas buyers of new sales are inclined towards apartments. In the case of sub-sales, the North East Region emerges as the most popular, with the Central Region trailing behind, yet the North Region consistently ranks as the least favored across all sales types."
  }
]